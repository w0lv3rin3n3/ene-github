
testing_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003350  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800345c  0800345c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034e8  080034e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034e8  080034e8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034e8  080034e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034e8  080034e8  000134e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034ec  080034ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000070  08003560  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003560  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006696  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017af  00000000  00000000  0002672f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  00027ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000680  00000000  00000000  000285f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172aa  00000000  00000000  00028c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f18  00000000  00000000  0003ff22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827b1  00000000  00000000  00047e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ca5eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f44  00000000  00000000  000ca63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003444 	.word	0x08003444

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003444 	.word	0x08003444

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800016a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800016e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000172:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000176:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800017a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 800017c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800017e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000180:	683b      	ldr	r3, [r7, #0]
 8000182:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000188:	68bb      	ldr	r3, [r7, #8]
 800018a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 800018c:	f107 0310 	add.w	r3, r7, #16
 8000190:	4618      	mov	r0, r3
 8000192:	f000 f80e 	bl	80001b2 <Lcd_init>

	return lcd;
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	461d      	mov	r5, r3
 800019a:	f107 0410 	add.w	r4, r7, #16
 800019e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001a6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001aa:	68f8      	ldr	r0, [r7, #12]
 80001ac:	3728      	adds	r7, #40	; 0x28
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bdb0      	pop	{r4, r5, r7, pc}

080001b2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80001b2:	b580      	push	{r7, lr}
 80001b4:	b082      	sub	sp, #8
 80001b6:	af00      	add	r7, sp, #0
 80001b8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	7d9b      	ldrb	r3, [r3, #22]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d10c      	bne.n	80001dc <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80001c2:	2133      	movs	r1, #51	; 0x33
 80001c4:	6878      	ldr	r0, [r7, #4]
 80001c6:	f000 f86f 	bl	80002a8 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80001ca:	2132      	movs	r1, #50	; 0x32
 80001cc:	6878      	ldr	r0, [r7, #4]
 80001ce:	f000 f86b 	bl	80002a8 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80001d2:	2128      	movs	r1, #40	; 0x28
 80001d4:	6878      	ldr	r0, [r7, #4]
 80001d6:	f000 f867 	bl	80002a8 <lcd_write_command>
 80001da:	e003      	b.n	80001e4 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80001dc:	2138      	movs	r1, #56	; 0x38
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	f000 f862 	bl	80002a8 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80001e4:	2101      	movs	r1, #1
 80001e6:	6878      	ldr	r0, [r7, #4]
 80001e8:	f000 f85e 	bl	80002a8 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80001ec:	210c      	movs	r1, #12
 80001ee:	6878      	ldr	r0, [r7, #4]
 80001f0:	f000 f85a 	bl	80002a8 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80001f4:	2106      	movs	r1, #6
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f000 f856 	bl	80002a8 <lcd_write_command>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 800020e:	f107 030c 	add.w	r3, r7, #12
 8000212:	683a      	ldr	r2, [r7, #0]
 8000214:	4906      	ldr	r1, [pc, #24]	; (8000230 <Lcd_int+0x2c>)
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fca8 	bl	8002b6c <siprintf>

	Lcd_string(lcd, buffer);
 800021c:	f107 030c 	add.w	r3, r7, #12
 8000220:	4619      	mov	r1, r3
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f000 f806 	bl	8000234 <Lcd_string>
}
 8000228:	bf00      	nop
 800022a:	3718      	adds	r7, #24
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	0800345c 	.word	0x0800345c

08000234 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800023e:	2300      	movs	r3, #0
 8000240:	73fb      	strb	r3, [r7, #15]
 8000242:	e00a      	b.n	800025a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	683a      	ldr	r2, [r7, #0]
 8000248:	4413      	add	r3, r2
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	4619      	mov	r1, r3
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 f858 	bl	8000304 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000254:	7bfb      	ldrb	r3, [r7, #15]
 8000256:	3301      	adds	r3, #1
 8000258:	73fb      	strb	r3, [r7, #15]
 800025a:	7bfc      	ldrb	r4, [r7, #15]
 800025c:	6838      	ldr	r0, [r7, #0]
 800025e:	f7ff ff75 	bl	800014c <strlen>
 8000262:	4603      	mov	r3, r0
 8000264:	429c      	cmp	r4, r3
 8000266:	d3ed      	bcc.n	8000244 <Lcd_string+0x10>
	}
}
 8000268:	bf00      	nop
 800026a:	bf00      	nop
 800026c:	3714      	adds	r7, #20
 800026e:	46bd      	mov	sp, r7
 8000270:	bd90      	pop	{r4, r7, pc}
	...

08000274 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	70fb      	strb	r3, [r7, #3]
 8000280:	4613      	mov	r3, r2
 8000282:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000284:	78fb      	ldrb	r3, [r7, #3]
 8000286:	4a07      	ldr	r2, [pc, #28]	; (80002a4 <Lcd_cursor+0x30>)
 8000288:	5cd2      	ldrb	r2, [r2, r3]
 800028a:	78bb      	ldrb	r3, [r7, #2]
 800028c:	4413      	add	r3, r2
 800028e:	b2db      	uxtb	r3, r3
 8000290:	3b80      	subs	r3, #128	; 0x80
 8000292:	b2db      	uxtb	r3, r3
 8000294:	4619      	mov	r1, r3
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f000 f806 	bl	80002a8 <lcd_write_command>
	#endif
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	08003498 	.word	0x08003498

080002a8 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	6898      	ldr	r0, [r3, #8]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	899b      	ldrh	r3, [r3, #12]
 80002bc:	2200      	movs	r2, #0
 80002be:	4619      	mov	r1, r3
 80002c0:	f001 f972 	bl	80015a8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	7d9b      	ldrb	r3, [r3, #22]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d111      	bne.n	80002f0 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80002cc:	78fb      	ldrb	r3, [r7, #3]
 80002ce:	091b      	lsrs	r3, r3, #4
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	2204      	movs	r2, #4
 80002d4:	4619      	mov	r1, r3
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f000 f842 	bl	8000360 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80002dc:	78fb      	ldrb	r3, [r7, #3]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	2204      	movs	r2, #4
 80002e6:	4619      	mov	r1, r3
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f000 f839 	bl	8000360 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80002ee:	e005      	b.n	80002fc <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	2208      	movs	r2, #8
 80002f4:	4619      	mov	r1, r3
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f000 f832 	bl	8000360 <lcd_write>
}
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	6898      	ldr	r0, [r3, #8]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	899b      	ldrh	r3, [r3, #12]
 8000318:	2201      	movs	r2, #1
 800031a:	4619      	mov	r1, r3
 800031c:	f001 f944 	bl	80015a8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	7d9b      	ldrb	r3, [r3, #22]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d111      	bne.n	800034c <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	091b      	lsrs	r3, r3, #4
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2204      	movs	r2, #4
 8000330:	4619      	mov	r1, r3
 8000332:	6878      	ldr	r0, [r7, #4]
 8000334:	f000 f814 	bl	8000360 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000338:	78fb      	ldrb	r3, [r7, #3]
 800033a:	f003 030f 	and.w	r3, r3, #15
 800033e:	b2db      	uxtb	r3, r3
 8000340:	2204      	movs	r2, #4
 8000342:	4619      	mov	r1, r3
 8000344:	6878      	ldr	r0, [r7, #4]
 8000346:	f000 f80b 	bl	8000360 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800034a:	e005      	b.n	8000358 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	2208      	movs	r2, #8
 8000350:	4619      	mov	r1, r3
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f000 f804 	bl	8000360 <lcd_write>
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	460b      	mov	r3, r1
 800036a:	70fb      	strb	r3, [r7, #3]
 800036c:	4613      	mov	r3, r2
 800036e:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000370:	2300      	movs	r3, #0
 8000372:	73fb      	strb	r3, [r7, #15]
 8000374:	e019      	b.n	80003aa <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	7bfb      	ldrb	r3, [r7, #15]
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	4413      	add	r3, r2
 8000380:	6818      	ldr	r0, [r3, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	685a      	ldr	r2, [r3, #4]
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	4413      	add	r3, r2
 800038c:	8819      	ldrh	r1, [r3, #0]
 800038e:	78fa      	ldrb	r2, [r7, #3]
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	fa42 f303 	asr.w	r3, r2, r3
 8000396:	b2db      	uxtb	r3, r3
 8000398:	f003 0301 	and.w	r3, r3, #1
 800039c:	b2db      	uxtb	r3, r3
 800039e:	461a      	mov	r2, r3
 80003a0:	f001 f902 	bl	80015a8 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80003a4:	7bfb      	ldrb	r3, [r7, #15]
 80003a6:	3301      	adds	r3, #1
 80003a8:	73fb      	strb	r3, [r7, #15]
 80003aa:	7bfa      	ldrb	r2, [r7, #15]
 80003ac:	78bb      	ldrb	r3, [r7, #2]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d3e1      	bcc.n	8000376 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6918      	ldr	r0, [r3, #16]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	8a9b      	ldrh	r3, [r3, #20]
 80003ba:	2201      	movs	r2, #1
 80003bc:	4619      	mov	r1, r3
 80003be:	f001 f8f3 	bl	80015a8 <HAL_GPIO_WritePin>
	DELAY(1);
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 fb9c 	bl	8000b00 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	6918      	ldr	r0, [r3, #16]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	8a9b      	ldrh	r3, [r3, #20]
 80003d0:	2200      	movs	r2, #0
 80003d2:	4619      	mov	r1, r3
 80003d4:	f001 f8e8 	bl	80015a8 <HAL_GPIO_WritePin>
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <HAL_UARTEx_RxEventCallback>:
unsigned int command_no = 0;
unsigned int old_command_no = 0;


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	460b      	mov	r3, r1
 80003ea:	807b      	strh	r3, [r7, #2]
	command_no++;
 80003ec:	4b19      	ldr	r3, [pc, #100]	; (8000454 <HAL_UARTEx_RxEventCallback+0x74>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	3301      	adds	r3, #1
 80003f2:	4a18      	ldr	r2, [pc, #96]	; (8000454 <HAL_UARTEx_RxEventCallback+0x74>)
 80003f4:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < MainBuf_SIZE; i++)
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	e007      	b.n	800040c <HAL_UARTEx_RxEventCallback+0x2c>
		MainBuf[i] = '\0';
 80003fc:	4a16      	ldr	r2, [pc, #88]	; (8000458 <HAL_UARTEx_RxEventCallback+0x78>)
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	4413      	add	r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < MainBuf_SIZE; i++)
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	3301      	adds	r3, #1
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	2b1d      	cmp	r3, #29
 8000410:	ddf4      	ble.n	80003fc <HAL_UARTEx_RxEventCallback+0x1c>
	memmove(MainBuf, RxBuf, Size);
 8000412:	887b      	ldrh	r3, [r7, #2]
 8000414:	4910      	ldr	r1, [pc, #64]	; (8000458 <HAL_UARTEx_RxEventCallback+0x78>)
 8000416:	4a11      	ldr	r2, [pc, #68]	; (800045c <HAL_UARTEx_RxEventCallback+0x7c>)
 8000418:	4608      	mov	r0, r1
 800041a:	4611      	mov	r1, r2
 800041c:	461a      	mov	r2, r3
 800041e:	f002 fb8f 	bl	8002b40 <memcpy>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8000422:	221e      	movs	r2, #30
 8000424:	490d      	ldr	r1, [pc, #52]	; (800045c <HAL_UARTEx_RxEventCallback+0x7c>)
 8000426:	480e      	ldr	r0, [pc, #56]	; (8000460 <HAL_UARTEx_RxEventCallback+0x80>)
 8000428:	f001 fdf1 	bl	800200e <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800042c:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <HAL_UARTEx_RxEventCallback+0x84>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <HAL_UARTEx_RxEventCallback+0x84>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f022 0204 	bic.w	r2, r2, #4
 800043a:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, MainBuf, MainBuf_SIZE, 500);
 800043c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000440:	221e      	movs	r2, #30
 8000442:	4905      	ldr	r1, [pc, #20]	; (8000458 <HAL_UARTEx_RxEventCallback+0x78>)
 8000444:	4806      	ldr	r0, [pc, #24]	; (8000460 <HAL_UARTEx_RxEventCallback+0x80>)
 8000446:	f001 fd50 	bl	8001eea <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, '\n\r', 2, 1000);
}
 800044a:	bf00      	nop
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000154 	.word	0x20000154
 8000458:	20000134 	.word	0x20000134
 800045c:	20000114 	.word	0x20000114
 8000460:	2000008c 	.word	0x2000008c
 8000464:	200000d0 	.word	0x200000d0

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b5b0      	push	{r4, r5, r7, lr}
 800046a:	b096      	sub	sp, #88	; 0x58
 800046c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046e:	f000 fae5 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000472:	f000 f875 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000476:	f000 f8fd 	bl	8000674 <MX_GPIO_Init>
  MX_DMA_Init();
 800047a:	f000 f8dd 	bl	8000638 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800047e:	f000 f8b1 	bl	80005e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8000482:	221e      	movs	r2, #30
 8000484:	492d      	ldr	r1, [pc, #180]	; (800053c <main+0xd4>)
 8000486:	482e      	ldr	r0, [pc, #184]	; (8000540 <main+0xd8>)
 8000488:	f001 fdc1 	bl	800200e <HAL_UARTEx_ReceiveToIdle_DMA>

  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800048c:	4b2d      	ldr	r3, [pc, #180]	; (8000544 <main+0xdc>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	4b2c      	ldr	r3, [pc, #176]	; (8000544 <main+0xdc>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f022 0204 	bic.w	r2, r2, #4
 800049a:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* USER CODE END WHILE */
	  if(command_no != old_command_no)
 800049c:	4b2a      	ldr	r3, [pc, #168]	; (8000548 <main+0xe0>)
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	4b2a      	ldr	r3, [pc, #168]	; (800054c <main+0xe4>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d0f9      	beq.n	800049c <main+0x34>
	  {
		  Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 80004a8:	4b29      	ldr	r3, [pc, #164]	; (8000550 <main+0xe8>)
 80004aa:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80004ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6};
 80004b4:	4a27      	ldr	r2, [pc, #156]	; (8000554 <main+0xec>)
 80004b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004be:	e883 0003 	stmia.w	r3, {r0, r1}
		  Lcd_HandleTypeDef lcd;
		  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 80004c2:	4638      	mov	r0, r7
 80004c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80004c8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80004cc:	2300      	movs	r3, #0
 80004ce:	9303      	str	r3, [sp, #12]
 80004d0:	2310      	movs	r3, #16
 80004d2:	9302      	str	r3, [sp, #8]
 80004d4:	4b20      	ldr	r3, [pc, #128]	; (8000558 <main+0xf0>)
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	2320      	movs	r3, #32
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <main+0xf0>)
 80004de:	f7ff fe3d 	bl	800015c <Lcd_create>
 80004e2:	f107 0418 	add.w	r4, r7, #24
 80004e6:	463d      	mov	r5, r7
 80004e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004f0:	e884 0003 	stmia.w	r4, {r0, r1}
		  Lcd_cursor(&lcd, 0,1);
 80004f4:	f107 0318 	add.w	r3, r7, #24
 80004f8:	2201      	movs	r2, #1
 80004fa:	2100      	movs	r1, #0
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff feb9 	bl	8000274 <Lcd_cursor>
	    Lcd_string(&lcd, "Cmds received:");
 8000502:	f107 0318 	add.w	r3, r7, #24
 8000506:	4915      	ldr	r1, [pc, #84]	; (800055c <main+0xf4>)
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff fe93 	bl	8000234 <Lcd_string>
	    Lcd_cursor(&lcd, 1, 7);
 800050e:	f107 0318 	add.w	r3, r7, #24
 8000512:	2207      	movs	r2, #7
 8000514:	2101      	movs	r1, #1
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff feac 	bl	8000274 <Lcd_cursor>
	    Lcd_int(&lcd, command_no/2);
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <main+0xe0>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	085b      	lsrs	r3, r3, #1
 8000522:	461a      	mov	r2, r3
 8000524:	f107 0318 	add.w	r3, r7, #24
 8000528:	4611      	mov	r1, r2
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff fe6a 	bl	8000204 <Lcd_int>
	    old_command_no = command_no;
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <main+0xe0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a05      	ldr	r2, [pc, #20]	; (800054c <main+0xe4>)
 8000536:	6013      	str	r3, [r2, #0]
	  if(command_no != old_command_no)
 8000538:	e7b0      	b.n	800049c <main+0x34>
 800053a:	bf00      	nop
 800053c:	20000114 	.word	0x20000114
 8000540:	2000008c 	.word	0x2000008c
 8000544:	200000d0 	.word	0x200000d0
 8000548:	20000154 	.word	0x20000154
 800054c:	20000158 	.word	0x20000158
 8000550:	08003470 	.word	0x08003470
 8000554:	08003480 	.word	0x08003480
 8000558:	40010c00 	.word	0x40010c00
 800055c:	08003460 	.word	0x08003460

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b090      	sub	sp, #64	; 0x40
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0318 	add.w	r3, r7, #24
 800056a:	2228      	movs	r2, #40	; 0x28
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 faf4 	bl	8002b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000582:	2302      	movs	r3, #2
 8000584:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	2301      	movs	r3, #1
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	2310      	movs	r3, #16
 800058c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000592:	2300      	movs	r3, #0
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000596:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0318 	add.w	r3, r7, #24
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 f83b 	bl	800161c <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005ac:	f000 f8f8 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2302      	movs	r3, #2
 80005b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2102      	movs	r1, #2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 faa8 	bl	8001b20 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80005d6:	f000 f8e3 	bl	80007a0 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3740      	adds	r7, #64	; 0x40
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_USART2_UART_Init+0x4c>)
 80005ea:	4a12      	ldr	r2, [pc, #72]	; (8000634 <MX_USART2_UART_Init+0x50>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <MX_USART2_UART_Init+0x4c>)
 80005f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_USART2_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_USART2_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <MX_USART2_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_USART2_UART_Init+0x4c>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_USART2_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_USART2_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_USART2_UART_Init+0x4c>)
 800061c:	f001 fc18 	bl	8001e50 <HAL_UART_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000626:	f000 f8bb 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000008c 	.word	0x2000008c
 8000634:	40004400 	.word	0x40004400

08000638 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_DMA_Init+0x38>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <MX_DMA_Init+0x38>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6153      	str	r3, [r2, #20]
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_DMA_Init+0x38>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000656:	2200      	movs	r2, #0
 8000658:	2100      	movs	r1, #0
 800065a:	2010      	movs	r0, #16
 800065c:	f000 fb4b 	bl	8000cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000660:	2010      	movs	r0, #16
 8000662:	f000 fb64 	bl	8000d2e <HAL_NVIC_EnableIRQ>

}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000688:	4b40      	ldr	r3, [pc, #256]	; (800078c <MX_GPIO_Init+0x118>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a3f      	ldr	r2, [pc, #252]	; (800078c <MX_GPIO_Init+0x118>)
 800068e:	f043 0310 	orr.w	r3, r3, #16
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b3d      	ldr	r3, [pc, #244]	; (800078c <MX_GPIO_Init+0x118>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0310 	and.w	r3, r3, #16
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a0:	4b3a      	ldr	r3, [pc, #232]	; (800078c <MX_GPIO_Init+0x118>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a39      	ldr	r2, [pc, #228]	; (800078c <MX_GPIO_Init+0x118>)
 80006a6:	f043 0320 	orr.w	r3, r3, #32
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <MX_GPIO_Init+0x118>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0320 	and.w	r3, r3, #32
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <MX_GPIO_Init+0x118>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a33      	ldr	r2, [pc, #204]	; (800078c <MX_GPIO_Init+0x118>)
 80006be:	f043 0304 	orr.w	r3, r3, #4
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b31      	ldr	r3, [pc, #196]	; (800078c <MX_GPIO_Init+0x118>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0304 	and.w	r3, r3, #4
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d0:	4b2e      	ldr	r3, [pc, #184]	; (800078c <MX_GPIO_Init+0x118>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a2d      	ldr	r2, [pc, #180]	; (800078c <MX_GPIO_Init+0x118>)
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b2b      	ldr	r3, [pc, #172]	; (800078c <MX_GPIO_Init+0x118>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	21c0      	movs	r1, #192	; 0xc0
 80006ec:	4828      	ldr	r0, [pc, #160]	; (8000790 <MX_GPIO_Init+0x11c>)
 80006ee:	f000 ff5b 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	4827      	ldr	r0, [pc, #156]	; (8000794 <MX_GPIO_Init+0x120>)
 80006f8:	f000 ff56 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2170      	movs	r1, #112	; 0x70
 8000700:	4825      	ldr	r0, [pc, #148]	; (8000798 <MX_GPIO_Init+0x124>)
 8000702:	f000 ff51 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_GPIO_Init+0x128>)
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	4619      	mov	r1, r3
 800071a:	481e      	ldr	r0, [pc, #120]	; (8000794 <MX_GPIO_Init+0x120>)
 800071c:	f000 fdc0 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000720:	23c0      	movs	r3, #192	; 0xc0
 8000722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2302      	movs	r3, #2
 800072e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	4619      	mov	r1, r3
 8000736:	4816      	ldr	r0, [pc, #88]	; (8000790 <MX_GPIO_Init+0x11c>)
 8000738:	f000 fdb2 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2302      	movs	r3, #2
 800074a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	4619      	mov	r1, r3
 8000752:	4810      	ldr	r0, [pc, #64]	; (8000794 <MX_GPIO_Init+0x120>)
 8000754:	f000 fda4 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000758:	2370      	movs	r3, #112	; 0x70
 800075a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2302      	movs	r3, #2
 8000766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	480a      	ldr	r0, [pc, #40]	; (8000798 <MX_GPIO_Init+0x124>)
 8000770:	f000 fd96 	bl	80012a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2028      	movs	r0, #40	; 0x28
 800077a:	f000 fabc 	bl	8000cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800077e:	2028      	movs	r0, #40	; 0x28
 8000780:	f000 fad5 	bl	8000d2e <HAL_NVIC_EnableIRQ>

}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	40010800 	.word	0x40010800
 8000794:	40011000 	.word	0x40011000
 8000798:	40010c00 	.word	0x40010c00
 800079c:	10110000 	.word	0x10110000

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x8>
	...

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <HAL_MspInit+0x5c>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	4a14      	ldr	r2, [pc, #80]	; (8000808 <HAL_MspInit+0x5c>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6193      	str	r3, [r2, #24]
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_MspInit+0x5c>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <HAL_MspInit+0x5c>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <HAL_MspInit+0x5c>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	61d3      	str	r3, [r2, #28]
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <HAL_MspInit+0x5c>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_MspInit+0x60>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_MspInit+0x60>)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	40021000 	.word	0x40021000
 800080c:	40010000 	.word	0x40010000

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a2c      	ldr	r2, [pc, #176]	; (80008dc <HAL_UART_MspInit+0xcc>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d151      	bne.n	80008d4 <HAL_UART_MspInit+0xc4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000830:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <HAL_UART_MspInit+0xd0>)
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	4a2a      	ldr	r2, [pc, #168]	; (80008e0 <HAL_UART_MspInit+0xd0>)
 8000836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083a:	61d3      	str	r3, [r2, #28]
 800083c:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <HAL_UART_MspInit+0xd0>)
 800083e:	69db      	ldr	r3, [r3, #28]
 8000840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <HAL_UART_MspInit+0xd0>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a24      	ldr	r2, [pc, #144]	; (80008e0 <HAL_UART_MspInit+0xd0>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <HAL_UART_MspInit+0xd0>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000860:	230c      	movs	r3, #12
 8000862:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2302      	movs	r3, #2
 800086a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	4619      	mov	r1, r3
 8000872:	481c      	ldr	r0, [pc, #112]	; (80008e4 <HAL_UART_MspInit+0xd4>)
 8000874:	f000 fd14 	bl	80012a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <HAL_UART_MspInit+0xd8>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <HAL_UART_MspInit+0xdc>)
 800087c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <HAL_UART_MspInit+0xd8>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <HAL_UART_MspInit+0xd8>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <HAL_UART_MspInit+0xd8>)
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <HAL_UART_MspInit+0xd8>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <HAL_UART_MspInit+0xd8>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_UART_MspInit+0xd8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_UART_MspInit+0xd8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008a8:	480f      	ldr	r0, [pc, #60]	; (80008e8 <HAL_UART_MspInit+0xd8>)
 80008aa:	f000 fa5b 	bl	8000d64 <HAL_DMA_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 80008b4:	f7ff ff74 	bl	80007a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <HAL_UART_MspInit+0xd8>)
 80008bc:	639a      	str	r2, [r3, #56]	; 0x38
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_UART_MspInit+0xd8>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2026      	movs	r0, #38	; 0x26
 80008ca:	f000 fa14 	bl	8000cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ce:	2026      	movs	r0, #38	; 0x26
 80008d0:	f000 fa2d 	bl	8000d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d4:	bf00      	nop
 80008d6:	3720      	adds	r7, #32
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40004400 	.word	0x40004400
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40010800 	.word	0x40010800
 80008e8:	200000d0 	.word	0x200000d0
 80008ec:	4002006c 	.word	0x4002006c

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr

08000926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr

08000932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000936:	f000 f8c7 	bl	8000ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <DMA1_Channel6_IRQHandler+0x10>)
 8000946:	f000 fb77 	bl	8001038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000d0 	.word	0x200000d0

08000954 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <USART2_IRQHandler+0x10>)
 800095a:	f001 fba7 	bl	80020ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000008c 	.word	0x2000008c

08000968 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800096c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000970:	f000 fe32 	bl	80015d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <_sbrk+0x5c>)
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <_sbrk+0x60>)
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d102      	bne.n	800099a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <_sbrk+0x64>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <_sbrk+0x68>)
 8000998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d207      	bcs.n	80009b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a8:	f002 f8a0 	bl	8002aec <__errno>
 80009ac:	4603      	mov	r3, r0
 80009ae:	220c      	movs	r2, #12
 80009b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	e009      	b.n	80009cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <_sbrk+0x64>)
 80009c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ca:	68fb      	ldr	r3, [r7, #12]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20005000 	.word	0x20005000
 80009d8:	00000400 	.word	0x00000400
 80009dc:	2000015c 	.word	0x2000015c
 80009e0:	20000178 	.word	0x20000178

080009e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009f2:	490d      	ldr	r1, [pc, #52]	; (8000a28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009f4:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a08:	4c0a      	ldr	r4, [pc, #40]	; (8000a34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a16:	f7ff ffe5 	bl	80009e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a1a:	f002 f86d 	bl	8002af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a1e:	f7ff fd23 	bl	8000468 <main>
  bx lr
 8000a22:	4770      	bx	lr
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a2c:	080034f0 	.word	0x080034f0
  ldr r2, =_sbss
 8000a30:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a34:	20000174 	.word	0x20000174

08000a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_2_IRQHandler>
	...

08000a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_Init+0x28>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_Init+0x28>)
 8000a46:	f043 0310 	orr.w	r3, r3, #16
 8000a4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f947 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 f808 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a58:	f7ff fea8 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40022000 	.word	0x40022000

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x54>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x58>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f95f 	bl	8000d4a <HAL_SYSTICK_Config>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00e      	b.n	8000ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d80a      	bhi.n	8000ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f000 f927 	bl	8000cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa8:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <HAL_InitTick+0x5c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e000      	b.n	8000ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_IncTick+0x1c>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a03      	ldr	r2, [pc, #12]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000160 	.word	0x20000160

08000aec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b02      	ldr	r3, [pc, #8]	; (8000afc <HAL_GetTick+0x10>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	20000160 	.word	0x20000160

08000b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b08:	f7ff fff0 	bl	8000aec <HAL_GetTick>
 8000b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b18:	d005      	beq.n	8000b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_Delay+0x44>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4413      	add	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b26:	bf00      	nop
 8000b28:	f7ff ffe0 	bl	8000aec <HAL_GetTick>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d8f7      	bhi.n	8000b28 <HAL_Delay+0x28>
  {
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008

08000b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b64:	4013      	ands	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	60d3      	str	r3, [r2, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	f003 0307 	and.w	r3, r3, #7
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db0b      	blt.n	8000bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 021f 	and.w	r2, r3, #31
 8000bc4:	4906      	ldr	r1, [pc, #24]	; (8000be0 <__NVIC_EnableIRQ+0x34>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	095b      	lsrs	r3, r3, #5
 8000bcc:	2001      	movs	r0, #1
 8000bce:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0a      	blt.n	8000c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	490c      	ldr	r1, [pc, #48]	; (8000c30 <__NVIC_SetPriority+0x4c>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c0c:	e00a      	b.n	8000c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4908      	ldr	r1, [pc, #32]	; (8000c34 <__NVIC_SetPriority+0x50>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f1c3 0307 	rsb	r3, r3, #7
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	bf28      	it	cs
 8000c56:	2304      	movcs	r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d902      	bls.n	8000c68 <NVIC_EncodePriority+0x30>
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3b03      	subs	r3, #3
 8000c66:	e000      	b.n	8000c6a <NVIC_EncodePriority+0x32>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	4313      	orrs	r3, r2
         );
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3724      	adds	r7, #36	; 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f7ff ff90 	bl	8000be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff2d 	bl	8000b48 <__NVIC_SetPriorityGrouping>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d08:	f7ff ff42 	bl	8000b90 <__NVIC_GetPriorityGrouping>
 8000d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f7ff ff90 	bl	8000c38 <NVIC_EncodePriority>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff5f 	bl	8000be4 <__NVIC_SetPriority>
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff35 	bl	8000bac <__NVIC_EnableIRQ>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffa2 	bl	8000c9c <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e043      	b.n	8000e02 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <HAL_DMA_Init+0xa8>)
 8000d82:	4413      	add	r3, r2
 8000d84:	4a22      	ldr	r2, [pc, #136]	; (8000e10 <HAL_DMA_Init+0xac>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	009a      	lsls	r2, r3, #2
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a1f      	ldr	r2, [pc, #124]	; (8000e14 <HAL_DMA_Init+0xb0>)
 8000d96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000dae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000db2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2201      	movs	r2, #1
 8000df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	bffdfff8 	.word	0xbffdfff8
 8000e10:	cccccccd 	.word	0xcccccccd
 8000e14:	40020000 	.word	0x40020000

08000e18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d101      	bne.n	8000e38 <HAL_DMA_Start_IT+0x20>
 8000e34:	2302      	movs	r3, #2
 8000e36:	e04a      	b.n	8000ece <HAL_DMA_Start_IT+0xb6>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d13a      	bne.n	8000ec0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2200      	movs	r2, #0
 8000e56:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 0201 	bic.w	r2, r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f000 f9e8 	bl	8001244 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d008      	beq.n	8000e8e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 020e 	orr.w	r2, r2, #14
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	e00f      	b.n	8000eae <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0204 	bic.w	r2, r2, #4
 8000e9c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f042 020a 	orr.w	r2, r2, #10
 8000eac:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f042 0201 	orr.w	r2, r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	e005      	b.n	8000ecc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b085      	sub	sp, #20
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d008      	beq.n	8000efe <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2204      	movs	r2, #4
 8000ef0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e020      	b.n	8000f40 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 020e 	bic.w	r2, r2, #14
 8000f0c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f022 0201 	bic.w	r2, r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f26:	2101      	movs	r1, #1
 8000f28:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
	...

08000f4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d005      	beq.n	8000f6e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2204      	movs	r2, #4
 8000f66:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	e051      	b.n	8001012 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 020e 	bic.w	r2, r2, #14
 8000f7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0201 	bic.w	r2, r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a22      	ldr	r2, [pc, #136]	; (800101c <HAL_DMA_Abort_IT+0xd0>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d029      	beq.n	8000fec <HAL_DMA_Abort_IT+0xa0>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a20      	ldr	r2, [pc, #128]	; (8001020 <HAL_DMA_Abort_IT+0xd4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d022      	beq.n	8000fe8 <HAL_DMA_Abort_IT+0x9c>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a1f      	ldr	r2, [pc, #124]	; (8001024 <HAL_DMA_Abort_IT+0xd8>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d01a      	beq.n	8000fe2 <HAL_DMA_Abort_IT+0x96>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <HAL_DMA_Abort_IT+0xdc>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d012      	beq.n	8000fdc <HAL_DMA_Abort_IT+0x90>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a1c      	ldr	r2, [pc, #112]	; (800102c <HAL_DMA_Abort_IT+0xe0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d00a      	beq.n	8000fd6 <HAL_DMA_Abort_IT+0x8a>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a1a      	ldr	r2, [pc, #104]	; (8001030 <HAL_DMA_Abort_IT+0xe4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d102      	bne.n	8000fd0 <HAL_DMA_Abort_IT+0x84>
 8000fca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fce:	e00e      	b.n	8000fee <HAL_DMA_Abort_IT+0xa2>
 8000fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fd4:	e00b      	b.n	8000fee <HAL_DMA_Abort_IT+0xa2>
 8000fd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fda:	e008      	b.n	8000fee <HAL_DMA_Abort_IT+0xa2>
 8000fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe0:	e005      	b.n	8000fee <HAL_DMA_Abort_IT+0xa2>
 8000fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe6:	e002      	b.n	8000fee <HAL_DMA_Abort_IT+0xa2>
 8000fe8:	2310      	movs	r3, #16
 8000fea:	e000      	b.n	8000fee <HAL_DMA_Abort_IT+0xa2>
 8000fec:	2301      	movs	r3, #1
 8000fee:	4a11      	ldr	r2, [pc, #68]	; (8001034 <HAL_DMA_Abort_IT+0xe8>)
 8000ff0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	4798      	blx	r3
    } 
  }
  return status;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40020008 	.word	0x40020008
 8001020:	4002001c 	.word	0x4002001c
 8001024:	40020030 	.word	0x40020030
 8001028:	40020044 	.word	0x40020044
 800102c:	40020058 	.word	0x40020058
 8001030:	4002006c 	.word	0x4002006c
 8001034:	40020000 	.word	0x40020000

08001038 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	2204      	movs	r2, #4
 8001056:	409a      	lsls	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4013      	ands	r3, r2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d04f      	beq.n	8001100 <HAL_DMA_IRQHandler+0xc8>
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	2b00      	cmp	r3, #0
 8001068:	d04a      	beq.n	8001100 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0320 	and.w	r3, r3, #32
 8001074:	2b00      	cmp	r3, #0
 8001076:	d107      	bne.n	8001088 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0204 	bic.w	r2, r2, #4
 8001086:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a66      	ldr	r2, [pc, #408]	; (8001228 <HAL_DMA_IRQHandler+0x1f0>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d029      	beq.n	80010e6 <HAL_DMA_IRQHandler+0xae>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a65      	ldr	r2, [pc, #404]	; (800122c <HAL_DMA_IRQHandler+0x1f4>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d022      	beq.n	80010e2 <HAL_DMA_IRQHandler+0xaa>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a63      	ldr	r2, [pc, #396]	; (8001230 <HAL_DMA_IRQHandler+0x1f8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d01a      	beq.n	80010dc <HAL_DMA_IRQHandler+0xa4>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a62      	ldr	r2, [pc, #392]	; (8001234 <HAL_DMA_IRQHandler+0x1fc>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d012      	beq.n	80010d6 <HAL_DMA_IRQHandler+0x9e>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a60      	ldr	r2, [pc, #384]	; (8001238 <HAL_DMA_IRQHandler+0x200>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d00a      	beq.n	80010d0 <HAL_DMA_IRQHandler+0x98>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a5f      	ldr	r2, [pc, #380]	; (800123c <HAL_DMA_IRQHandler+0x204>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d102      	bne.n	80010ca <HAL_DMA_IRQHandler+0x92>
 80010c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010c8:	e00e      	b.n	80010e8 <HAL_DMA_IRQHandler+0xb0>
 80010ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010ce:	e00b      	b.n	80010e8 <HAL_DMA_IRQHandler+0xb0>
 80010d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010d4:	e008      	b.n	80010e8 <HAL_DMA_IRQHandler+0xb0>
 80010d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010da:	e005      	b.n	80010e8 <HAL_DMA_IRQHandler+0xb0>
 80010dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e0:	e002      	b.n	80010e8 <HAL_DMA_IRQHandler+0xb0>
 80010e2:	2340      	movs	r3, #64	; 0x40
 80010e4:	e000      	b.n	80010e8 <HAL_DMA_IRQHandler+0xb0>
 80010e6:	2304      	movs	r3, #4
 80010e8:	4a55      	ldr	r2, [pc, #340]	; (8001240 <HAL_DMA_IRQHandler+0x208>)
 80010ea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 8094 	beq.w	800121e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010fe:	e08e      	b.n	800121e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	2202      	movs	r2, #2
 8001106:	409a      	lsls	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4013      	ands	r3, r2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d056      	beq.n	80011be <HAL_DMA_IRQHandler+0x186>
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d051      	beq.n	80011be <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0320 	and.w	r3, r3, #32
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10b      	bne.n	8001140 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 020a 	bic.w	r2, r2, #10
 8001136:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a38      	ldr	r2, [pc, #224]	; (8001228 <HAL_DMA_IRQHandler+0x1f0>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d029      	beq.n	800119e <HAL_DMA_IRQHandler+0x166>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a37      	ldr	r2, [pc, #220]	; (800122c <HAL_DMA_IRQHandler+0x1f4>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d022      	beq.n	800119a <HAL_DMA_IRQHandler+0x162>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a35      	ldr	r2, [pc, #212]	; (8001230 <HAL_DMA_IRQHandler+0x1f8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d01a      	beq.n	8001194 <HAL_DMA_IRQHandler+0x15c>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a34      	ldr	r2, [pc, #208]	; (8001234 <HAL_DMA_IRQHandler+0x1fc>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d012      	beq.n	800118e <HAL_DMA_IRQHandler+0x156>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a32      	ldr	r2, [pc, #200]	; (8001238 <HAL_DMA_IRQHandler+0x200>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d00a      	beq.n	8001188 <HAL_DMA_IRQHandler+0x150>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a31      	ldr	r2, [pc, #196]	; (800123c <HAL_DMA_IRQHandler+0x204>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d102      	bne.n	8001182 <HAL_DMA_IRQHandler+0x14a>
 800117c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001180:	e00e      	b.n	80011a0 <HAL_DMA_IRQHandler+0x168>
 8001182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001186:	e00b      	b.n	80011a0 <HAL_DMA_IRQHandler+0x168>
 8001188:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800118c:	e008      	b.n	80011a0 <HAL_DMA_IRQHandler+0x168>
 800118e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001192:	e005      	b.n	80011a0 <HAL_DMA_IRQHandler+0x168>
 8001194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001198:	e002      	b.n	80011a0 <HAL_DMA_IRQHandler+0x168>
 800119a:	2320      	movs	r3, #32
 800119c:	e000      	b.n	80011a0 <HAL_DMA_IRQHandler+0x168>
 800119e:	2302      	movs	r3, #2
 80011a0:	4a27      	ldr	r2, [pc, #156]	; (8001240 <HAL_DMA_IRQHandler+0x208>)
 80011a2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d034      	beq.n	800121e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80011bc:	e02f      	b.n	800121e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	2208      	movs	r2, #8
 80011c4:	409a      	lsls	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d028      	beq.n	8001220 <HAL_DMA_IRQHandler+0x1e8>
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d023      	beq.n	8001220 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 020e 	bic.w	r2, r2, #14
 80011e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f0:	2101      	movs	r1, #1
 80011f2:	fa01 f202 	lsl.w	r2, r1, r2
 80011f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	2b00      	cmp	r3, #0
 8001214:	d004      	beq.n	8001220 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	4798      	blx	r3
    }
  }
  return;
 800121e:	bf00      	nop
 8001220:	bf00      	nop
}
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40020008 	.word	0x40020008
 800122c:	4002001c 	.word	0x4002001c
 8001230:	40020030 	.word	0x40020030
 8001234:	40020044 	.word	0x40020044
 8001238:	40020058 	.word	0x40020058
 800123c:	4002006c 	.word	0x4002006c
 8001240:	40020000 	.word	0x40020000

08001244 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800125a:	2101      	movs	r1, #1
 800125c:	fa01 f202 	lsl.w	r2, r1, r2
 8001260:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b10      	cmp	r3, #16
 8001270:	d108      	bne.n	8001284 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001282:	e007      	b.n	8001294 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68ba      	ldr	r2, [r7, #8]
 800128a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	60da      	str	r2, [r3, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b08b      	sub	sp, #44	; 0x2c
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b2:	e169      	b.n	8001588 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012b4:	2201      	movs	r2, #1
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	69fa      	ldr	r2, [r7, #28]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	f040 8158 	bne.w	8001582 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4a9a      	ldr	r2, [pc, #616]	; (8001540 <HAL_GPIO_Init+0x2a0>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d05e      	beq.n	800139a <HAL_GPIO_Init+0xfa>
 80012dc:	4a98      	ldr	r2, [pc, #608]	; (8001540 <HAL_GPIO_Init+0x2a0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d875      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 80012e2:	4a98      	ldr	r2, [pc, #608]	; (8001544 <HAL_GPIO_Init+0x2a4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d058      	beq.n	800139a <HAL_GPIO_Init+0xfa>
 80012e8:	4a96      	ldr	r2, [pc, #600]	; (8001544 <HAL_GPIO_Init+0x2a4>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d86f      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 80012ee:	4a96      	ldr	r2, [pc, #600]	; (8001548 <HAL_GPIO_Init+0x2a8>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d052      	beq.n	800139a <HAL_GPIO_Init+0xfa>
 80012f4:	4a94      	ldr	r2, [pc, #592]	; (8001548 <HAL_GPIO_Init+0x2a8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d869      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 80012fa:	4a94      	ldr	r2, [pc, #592]	; (800154c <HAL_GPIO_Init+0x2ac>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d04c      	beq.n	800139a <HAL_GPIO_Init+0xfa>
 8001300:	4a92      	ldr	r2, [pc, #584]	; (800154c <HAL_GPIO_Init+0x2ac>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d863      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 8001306:	4a92      	ldr	r2, [pc, #584]	; (8001550 <HAL_GPIO_Init+0x2b0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d046      	beq.n	800139a <HAL_GPIO_Init+0xfa>
 800130c:	4a90      	ldr	r2, [pc, #576]	; (8001550 <HAL_GPIO_Init+0x2b0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d85d      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 8001312:	2b12      	cmp	r3, #18
 8001314:	d82a      	bhi.n	800136c <HAL_GPIO_Init+0xcc>
 8001316:	2b12      	cmp	r3, #18
 8001318:	d859      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 800131a:	a201      	add	r2, pc, #4	; (adr r2, 8001320 <HAL_GPIO_Init+0x80>)
 800131c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001320:	0800139b 	.word	0x0800139b
 8001324:	08001375 	.word	0x08001375
 8001328:	08001387 	.word	0x08001387
 800132c:	080013c9 	.word	0x080013c9
 8001330:	080013cf 	.word	0x080013cf
 8001334:	080013cf 	.word	0x080013cf
 8001338:	080013cf 	.word	0x080013cf
 800133c:	080013cf 	.word	0x080013cf
 8001340:	080013cf 	.word	0x080013cf
 8001344:	080013cf 	.word	0x080013cf
 8001348:	080013cf 	.word	0x080013cf
 800134c:	080013cf 	.word	0x080013cf
 8001350:	080013cf 	.word	0x080013cf
 8001354:	080013cf 	.word	0x080013cf
 8001358:	080013cf 	.word	0x080013cf
 800135c:	080013cf 	.word	0x080013cf
 8001360:	080013cf 	.word	0x080013cf
 8001364:	0800137d 	.word	0x0800137d
 8001368:	08001391 	.word	0x08001391
 800136c:	4a79      	ldr	r2, [pc, #484]	; (8001554 <HAL_GPIO_Init+0x2b4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d013      	beq.n	800139a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001372:	e02c      	b.n	80013ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	623b      	str	r3, [r7, #32]
          break;
 800137a:	e029      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	3304      	adds	r3, #4
 8001382:	623b      	str	r3, [r7, #32]
          break;
 8001384:	e024      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	3308      	adds	r3, #8
 800138c:	623b      	str	r3, [r7, #32]
          break;
 800138e:	e01f      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	330c      	adds	r3, #12
 8001396:	623b      	str	r3, [r7, #32]
          break;
 8001398:	e01a      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013a2:	2304      	movs	r3, #4
 80013a4:	623b      	str	r3, [r7, #32]
          break;
 80013a6:	e013      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d105      	bne.n	80013bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013b0:	2308      	movs	r3, #8
 80013b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	611a      	str	r2, [r3, #16]
          break;
 80013ba:	e009      	b.n	80013d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013bc:	2308      	movs	r3, #8
 80013be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69fa      	ldr	r2, [r7, #28]
 80013c4:	615a      	str	r2, [r3, #20]
          break;
 80013c6:	e003      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
          break;
 80013cc:	e000      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          break;
 80013ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2bff      	cmp	r3, #255	; 0xff
 80013d4:	d801      	bhi.n	80013da <HAL_GPIO_Init+0x13a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	e001      	b.n	80013de <HAL_GPIO_Init+0x13e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3304      	adds	r3, #4
 80013de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2bff      	cmp	r3, #255	; 0xff
 80013e4:	d802      	bhi.n	80013ec <HAL_GPIO_Init+0x14c>
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	e002      	b.n	80013f2 <HAL_GPIO_Init+0x152>
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	3b08      	subs	r3, #8
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	210f      	movs	r1, #15
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	401a      	ands	r2, r3
 8001404:	6a39      	ldr	r1, [r7, #32]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	431a      	orrs	r2, r3
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 80b1 	beq.w	8001582 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001420:	4b4d      	ldr	r3, [pc, #308]	; (8001558 <HAL_GPIO_Init+0x2b8>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a4c      	ldr	r2, [pc, #304]	; (8001558 <HAL_GPIO_Init+0x2b8>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b4a      	ldr	r3, [pc, #296]	; (8001558 <HAL_GPIO_Init+0x2b8>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001438:	4a48      	ldr	r2, [pc, #288]	; (800155c <HAL_GPIO_Init+0x2bc>)
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	3302      	adds	r3, #2
 8001440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001444:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	220f      	movs	r2, #15
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4013      	ands	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a40      	ldr	r2, [pc, #256]	; (8001560 <HAL_GPIO_Init+0x2c0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d013      	beq.n	800148c <HAL_GPIO_Init+0x1ec>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a3f      	ldr	r2, [pc, #252]	; (8001564 <HAL_GPIO_Init+0x2c4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d00d      	beq.n	8001488 <HAL_GPIO_Init+0x1e8>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a3e      	ldr	r2, [pc, #248]	; (8001568 <HAL_GPIO_Init+0x2c8>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d007      	beq.n	8001484 <HAL_GPIO_Init+0x1e4>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a3d      	ldr	r2, [pc, #244]	; (800156c <HAL_GPIO_Init+0x2cc>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d101      	bne.n	8001480 <HAL_GPIO_Init+0x1e0>
 800147c:	2303      	movs	r3, #3
 800147e:	e006      	b.n	800148e <HAL_GPIO_Init+0x1ee>
 8001480:	2304      	movs	r3, #4
 8001482:	e004      	b.n	800148e <HAL_GPIO_Init+0x1ee>
 8001484:	2302      	movs	r3, #2
 8001486:	e002      	b.n	800148e <HAL_GPIO_Init+0x1ee>
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <HAL_GPIO_Init+0x1ee>
 800148c:	2300      	movs	r3, #0
 800148e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001490:	f002 0203 	and.w	r2, r2, #3
 8001494:	0092      	lsls	r2, r2, #2
 8001496:	4093      	lsls	r3, r2
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	4313      	orrs	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800149e:	492f      	ldr	r1, [pc, #188]	; (800155c <HAL_GPIO_Init+0x2bc>)
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	3302      	adds	r3, #2
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	492c      	ldr	r1, [pc, #176]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	600b      	str	r3, [r1, #0]
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	4928      	ldr	r1, [pc, #160]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d006      	beq.n	80014ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4922      	ldr	r1, [pc, #136]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	491e      	ldr	r1, [pc, #120]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d006      	beq.n	8001516 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	4918      	ldr	r1, [pc, #96]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	608b      	str	r3, [r1, #8]
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	43db      	mvns	r3, r3
 800151e:	4914      	ldr	r1, [pc, #80]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 8001520:	4013      	ands	r3, r2
 8001522:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d021      	beq.n	8001574 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	490e      	ldr	r1, [pc, #56]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	60cb      	str	r3, [r1, #12]
 800153c:	e021      	b.n	8001582 <HAL_GPIO_Init+0x2e2>
 800153e:	bf00      	nop
 8001540:	10320000 	.word	0x10320000
 8001544:	10310000 	.word	0x10310000
 8001548:	10220000 	.word	0x10220000
 800154c:	10210000 	.word	0x10210000
 8001550:	10120000 	.word	0x10120000
 8001554:	10110000 	.word	0x10110000
 8001558:	40021000 	.word	0x40021000
 800155c:	40010000 	.word	0x40010000
 8001560:	40010800 	.word	0x40010800
 8001564:	40010c00 	.word	0x40010c00
 8001568:	40011000 	.word	0x40011000
 800156c:	40011400 	.word	0x40011400
 8001570:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_GPIO_Init+0x304>)
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	43db      	mvns	r3, r3
 800157c:	4909      	ldr	r1, [pc, #36]	; (80015a4 <HAL_GPIO_Init+0x304>)
 800157e:	4013      	ands	r3, r2
 8001580:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	3301      	adds	r3, #1
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	fa22 f303 	lsr.w	r3, r2, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	f47f ae8e 	bne.w	80012b4 <HAL_GPIO_Init+0x14>
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	372c      	adds	r7, #44	; 0x2c
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	40010400 	.word	0x40010400

080015a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
 80015b4:	4613      	mov	r3, r2
 80015b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b8:	787b      	ldrb	r3, [r7, #1]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015be:	887a      	ldrh	r2, [r7, #2]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015c4:	e003      	b.n	80015ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015c6:	887b      	ldrh	r3, [r7, #2]
 80015c8:	041a      	lsls	r2, r3, #16
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	611a      	str	r2, [r3, #16]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f806 	bl	8001608 <HAL_GPIO_EXTI_Callback>
  }
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40010400 	.word	0x40010400

08001608 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e272      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 8087 	beq.w	800174a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800163c:	4b92      	ldr	r3, [pc, #584]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b04      	cmp	r3, #4
 8001646:	d00c      	beq.n	8001662 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001648:	4b8f      	ldr	r3, [pc, #572]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	2b08      	cmp	r3, #8
 8001652:	d112      	bne.n	800167a <HAL_RCC_OscConfig+0x5e>
 8001654:	4b8c      	ldr	r3, [pc, #560]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001660:	d10b      	bne.n	800167a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001662:	4b89      	ldr	r3, [pc, #548]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d06c      	beq.n	8001748 <HAL_RCC_OscConfig+0x12c>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d168      	bne.n	8001748 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e24c      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001682:	d106      	bne.n	8001692 <HAL_RCC_OscConfig+0x76>
 8001684:	4b80      	ldr	r3, [pc, #512]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a7f      	ldr	r2, [pc, #508]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 800168a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	e02e      	b.n	80016f0 <HAL_RCC_OscConfig+0xd4>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x98>
 800169a:	4b7b      	ldr	r3, [pc, #492]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a7a      	ldr	r2, [pc, #488]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b78      	ldr	r3, [pc, #480]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a77      	ldr	r2, [pc, #476]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e01d      	b.n	80016f0 <HAL_RCC_OscConfig+0xd4>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0xbc>
 80016be:	4b72      	ldr	r3, [pc, #456]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a71      	ldr	r2, [pc, #452]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b6f      	ldr	r3, [pc, #444]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a6e      	ldr	r2, [pc, #440]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0xd4>
 80016d8:	4b6b      	ldr	r3, [pc, #428]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a6a      	ldr	r2, [pc, #424]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	4b68      	ldr	r3, [pc, #416]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a67      	ldr	r2, [pc, #412]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d013      	beq.n	8001720 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff f9f8 	bl	8000aec <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff f9f4 	bl	8000aec <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b64      	cmp	r3, #100	; 0x64
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e200      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001712:	4b5d      	ldr	r3, [pc, #372]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0xe4>
 800171e:	e014      	b.n	800174a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff f9e4 	bl	8000aec <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff f9e0 	bl	8000aec <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	; 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e1ec      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173a:	4b53      	ldr	r3, [pc, #332]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x10c>
 8001746:	e000      	b.n	800174a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d063      	beq.n	800181e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001756:	4b4c      	ldr	r3, [pc, #304]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00b      	beq.n	800177a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001762:	4b49      	ldr	r3, [pc, #292]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b08      	cmp	r3, #8
 800176c:	d11c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x18c>
 800176e:	4b46      	ldr	r3, [pc, #280]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d116      	bne.n	80017a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	4b43      	ldr	r3, [pc, #268]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <HAL_RCC_OscConfig+0x176>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e1c0      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001792:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4939      	ldr	r1, [pc, #228]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a6:	e03a      	b.n	800181e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b0:	4b36      	ldr	r3, [pc, #216]	; (800188c <HAL_RCC_OscConfig+0x270>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7ff f999 	bl	8000aec <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017be:	f7ff f995 	bl	8000aec <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e1a1      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d0:	4b2d      	ldr	r3, [pc, #180]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017dc:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4927      	ldr	r1, [pc, #156]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
 80017f0:	e015      	b.n	800181e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f2:	4b26      	ldr	r3, [pc, #152]	; (800188c <HAL_RCC_OscConfig+0x270>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff f978 	bl	8000aec <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001800:	f7ff f974 	bl	8000aec <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e180      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001812:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d03a      	beq.n	80018a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d019      	beq.n	8001866 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <HAL_RCC_OscConfig+0x274>)
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001838:	f7ff f958 	bl	8000aec <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001840:	f7ff f954 	bl	8000aec <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e160      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800185e:	2001      	movs	r0, #1
 8001860:	f000 fad8 	bl	8001e14 <RCC_Delay>
 8001864:	e01c      	b.n	80018a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_RCC_OscConfig+0x274>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186c:	f7ff f93e 	bl	8000aec <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001872:	e00f      	b.n	8001894 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001874:	f7ff f93a 	bl	8000aec <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d908      	bls.n	8001894 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e146      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	42420000 	.word	0x42420000
 8001890:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001894:	4b92      	ldr	r3, [pc, #584]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1e9      	bne.n	8001874 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80a6 	beq.w	80019fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018b2:	4b8b      	ldr	r3, [pc, #556]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10d      	bne.n	80018da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018be:	4b88      	ldr	r3, [pc, #544]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	4a87      	ldr	r2, [pc, #540]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c8:	61d3      	str	r3, [r2, #28]
 80018ca:	4b85      	ldr	r3, [pc, #532]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d6:	2301      	movs	r3, #1
 80018d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018da:	4b82      	ldr	r3, [pc, #520]	; (8001ae4 <HAL_RCC_OscConfig+0x4c8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d118      	bne.n	8001918 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e6:	4b7f      	ldr	r3, [pc, #508]	; (8001ae4 <HAL_RCC_OscConfig+0x4c8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a7e      	ldr	r2, [pc, #504]	; (8001ae4 <HAL_RCC_OscConfig+0x4c8>)
 80018ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f2:	f7ff f8fb 	bl	8000aec <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fa:	f7ff f8f7 	bl	8000aec <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b64      	cmp	r3, #100	; 0x64
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e103      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190c:	4b75      	ldr	r3, [pc, #468]	; (8001ae4 <HAL_RCC_OscConfig+0x4c8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x312>
 8001920:	4b6f      	ldr	r3, [pc, #444]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4a6e      	ldr	r2, [pc, #440]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6213      	str	r3, [r2, #32]
 800192c:	e02d      	b.n	800198a <HAL_RCC_OscConfig+0x36e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x334>
 8001936:	4b6a      	ldr	r3, [pc, #424]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4a69      	ldr	r2, [pc, #420]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	6213      	str	r3, [r2, #32]
 8001942:	4b67      	ldr	r3, [pc, #412]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	4a66      	ldr	r2, [pc, #408]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	f023 0304 	bic.w	r3, r3, #4
 800194c:	6213      	str	r3, [r2, #32]
 800194e:	e01c      	b.n	800198a <HAL_RCC_OscConfig+0x36e>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2b05      	cmp	r3, #5
 8001956:	d10c      	bne.n	8001972 <HAL_RCC_OscConfig+0x356>
 8001958:	4b61      	ldr	r3, [pc, #388]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	4a60      	ldr	r2, [pc, #384]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	6213      	str	r3, [r2, #32]
 8001964:	4b5e      	ldr	r3, [pc, #376]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	4a5d      	ldr	r2, [pc, #372]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6213      	str	r3, [r2, #32]
 8001970:	e00b      	b.n	800198a <HAL_RCC_OscConfig+0x36e>
 8001972:	4b5b      	ldr	r3, [pc, #364]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	4a5a      	ldr	r2, [pc, #360]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	f023 0301 	bic.w	r3, r3, #1
 800197c:	6213      	str	r3, [r2, #32]
 800197e:	4b58      	ldr	r3, [pc, #352]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	4a57      	ldr	r2, [pc, #348]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	f023 0304 	bic.w	r3, r3, #4
 8001988:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d015      	beq.n	80019be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001992:	f7ff f8ab 	bl	8000aec <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001998:	e00a      	b.n	80019b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199a:	f7ff f8a7 	bl	8000aec <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e0b1      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b0:	4b4b      	ldr	r3, [pc, #300]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ee      	beq.n	800199a <HAL_RCC_OscConfig+0x37e>
 80019bc:	e014      	b.n	80019e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019be:	f7ff f895 	bl	8000aec <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7ff f891 	bl	8000aec <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e09b      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019dc:	4b40      	ldr	r3, [pc, #256]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1ee      	bne.n	80019c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d105      	bne.n	80019fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ee:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4a3b      	ldr	r2, [pc, #236]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8087 	beq.w	8001b12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a04:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d061      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d146      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a18:	4b33      	ldr	r3, [pc, #204]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f865 	bl	8000aec <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff f861 	bl	8000aec <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e06d      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f0      	bne.n	8001a26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4c:	d108      	bne.n	8001a60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a4e:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	4921      	ldr	r1, [pc, #132]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a60:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a19      	ldr	r1, [r3, #32]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	430b      	orrs	r3, r1
 8001a72:	491b      	ldr	r1, [pc, #108]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a78:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7ff f835 	bl	8000aec <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a86:	f7ff f831 	bl	8000aec <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e03d      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x46a>
 8001aa4:	e035      	b.n	8001b12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff f81e 	bl	8000aec <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7ff f81a 	bl	8000aec <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e026      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x498>
 8001ad2:	e01e      	b.n	8001b12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d107      	bne.n	8001aec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e019      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40007000 	.word	0x40007000
 8001ae8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_OscConfig+0x500>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000

08001b20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0d0      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b34:	4b6a      	ldr	r3, [pc, #424]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d910      	bls.n	8001b64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b67      	ldr	r3, [pc, #412]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 0207 	bic.w	r2, r3, #7
 8001b4a:	4965      	ldr	r1, [pc, #404]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	4b63      	ldr	r3, [pc, #396]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0b8      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d020      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b7c:	4b59      	ldr	r3, [pc, #356]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4a58      	ldr	r2, [pc, #352]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b94:	4b53      	ldr	r3, [pc, #332]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	4a52      	ldr	r2, [pc, #328]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba0:	4b50      	ldr	r3, [pc, #320]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	494d      	ldr	r1, [pc, #308]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d040      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d107      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc6:	4b47      	ldr	r3, [pc, #284]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d115      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e07f      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bde:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e073      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e06b      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfe:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f023 0203 	bic.w	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4936      	ldr	r1, [pc, #216]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c10:	f7fe ff6c 	bl	8000aec <HAL_GetTick>
 8001c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c18:	f7fe ff68 	bl	8000aec <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e053      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 020c 	and.w	r2, r3, #12
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d1eb      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c40:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d210      	bcs.n	8001c70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 0207 	bic.w	r2, r3, #7
 8001c56:	4922      	ldr	r1, [pc, #136]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e032      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	4916      	ldr	r1, [pc, #88]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d009      	beq.n	8001cae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	490e      	ldr	r1, [pc, #56]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cae:	f000 f821 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	490a      	ldr	r1, [pc, #40]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc0:	5ccb      	ldrb	r3, [r1, r3]
 8001cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc6:	4a09      	ldr	r2, [pc, #36]	; (8001cec <HAL_RCC_ClockConfig+0x1cc>)
 8001cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_RCC_ClockConfig+0x1d0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe feca 	bl	8000a68 <HAL_InitTick>

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40022000 	.word	0x40022000
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	0800349c 	.word	0x0800349c
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000004 	.word	0x20000004

08001cf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf4:	b490      	push	{r4, r7}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cfa:	4b29      	ldr	r3, [pc, #164]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001cfc:	1d3c      	adds	r4, r7, #4
 8001cfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d04:	f240 2301 	movw	r3, #513	; 0x201
 8001d08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d002      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x40>
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d003      	beq.n	8001d3a <HAL_RCC_GetSysClockFreq+0x46>
 8001d32:	e02b      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d34:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d36:	623b      	str	r3, [r7, #32]
      break;
 8001d38:	e02b      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	0c9b      	lsrs	r3, r3, #18
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	3328      	adds	r3, #40	; 0x28
 8001d44:	443b      	add	r3, r7
 8001d46:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d4a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d012      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d56:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	0c5b      	lsrs	r3, r3, #17
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	3328      	adds	r3, #40	; 0x28
 8001d62:	443b      	add	r3, r7
 8001d64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d6e:	fb03 f202 	mul.w	r2, r3, r2
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	e004      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d80:	fb02 f303 	mul.w	r3, r2, r3
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	623b      	str	r3, [r7, #32]
      break;
 8001d8a:	e002      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d8e:	623b      	str	r3, [r7, #32]
      break;
 8001d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d92:	6a3b      	ldr	r3, [r7, #32]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3728      	adds	r7, #40	; 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc90      	pop	{r4, r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	08003488 	.word	0x08003488
 8001da4:	40021000 	.word	0x40021000
 8001da8:	007a1200 	.word	0x007a1200
 8001dac:	003d0900 	.word	0x003d0900

08001db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db4:	4b02      	ldr	r3, [pc, #8]	; (8001dc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	20000000 	.word	0x20000000

08001dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dc8:	f7ff fff2 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	4903      	ldr	r1, [pc, #12]	; (8001de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	080034ac 	.word	0x080034ac

08001dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001df0:	f7ff ffde 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	0adb      	lsrs	r3, r3, #11
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4903      	ldr	r1, [pc, #12]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	080034ac 	.word	0x080034ac

08001e14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <RCC_Delay+0x34>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <RCC_Delay+0x38>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	0a5b      	lsrs	r3, r3, #9
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e30:	bf00      	nop
  }
  while (Delay --);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1e5a      	subs	r2, r3, #1
 8001e36:	60fa      	str	r2, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f9      	bne.n	8001e30 <RCC_Delay+0x1c>
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	10624dd3 	.word	0x10624dd3

08001e50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e03f      	b.n	8001ee2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe fcca 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2224      	movs	r2, #36	; 0x24
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fd9b 	bl	80029d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001eb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b08a      	sub	sp, #40	; 0x28
 8001eee:	af02      	add	r7, sp, #8
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	d17c      	bne.n	8002004 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_UART_Transmit+0x2c>
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e075      	b.n	8002006 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_UART_Transmit+0x3e>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e06e      	b.n	8002006 <HAL_UART_Transmit+0x11c>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2221      	movs	r2, #33	; 0x21
 8001f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f3e:	f7fe fdd5 	bl	8000aec <HAL_GetTick>
 8001f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	88fa      	ldrh	r2, [r7, #6]
 8001f48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	88fa      	ldrh	r2, [r7, #6]
 8001f4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f58:	d108      	bne.n	8001f6c <HAL_UART_Transmit+0x82>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d104      	bne.n	8001f6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	e003      	b.n	8001f74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f7c:	e02a      	b.n	8001fd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2200      	movs	r2, #0
 8001f86:	2180      	movs	r1, #128	; 0x80
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fb0d 	bl	80025a8 <UART_WaitOnFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e036      	b.n	8002006 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	61bb      	str	r3, [r7, #24]
 8001fb4:	e007      	b.n	8001fc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	781a      	ldrb	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1cf      	bne.n	8001f7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2140      	movs	r1, #64	; 0x40
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 fadd 	bl	80025a8 <UART_WaitOnFlagUntilTimeout>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e006      	b.n	8002006 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	e000      	b.n	8002006 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002004:	2302      	movs	r3, #2
  }
}
 8002006:	4618      	mov	r0, r3
 8002008:	3720      	adds	r7, #32
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	4613      	mov	r3, r2
 800201a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b20      	cmp	r3, #32
 8002026:	d13c      	bne.n	80020a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e035      	b.n	80020a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8002042:	2302      	movs	r3, #2
 8002044:	e02e      	b.n	80020a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2201      	movs	r2, #1
 8002052:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	461a      	mov	r2, r3
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 faee 	bl	800263c <UART_Start_Receive_DMA>
 8002060:	4603      	mov	r3, r0
 8002062:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d119      	bne.n	800209e <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	2b01      	cmp	r3, #1
 8002070:	d113      	bne.n	800209a <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0210 	orr.w	r2, r2, #16
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	e001      	b.n	800209e <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800209e:	7dfb      	ldrb	r3, [r7, #23]
 80020a0:	e000      	b.n	80020a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 80020a2:	2302      	movs	r3, #2
  }
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10d      	bne.n	80020fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_UART_IRQHandler+0x52>
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 fbc0 	bl	800287c <UART_Receive_IT>
      return;
 80020fc:	e17b      	b.n	80023f6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80b1 	beq.w	8002268 <HAL_UART_IRQHandler+0x1bc>
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <HAL_UART_IRQHandler+0x70>
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 80a6 	beq.w	8002268 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_UART_IRQHandler+0x90>
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f043 0201 	orr.w	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_UART_IRQHandler+0xb0>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	f043 0202 	orr.w	r2, r3, #2
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_UART_IRQHandler+0xd0>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f043 0204 	orr.w	r2, r3, #4
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00f      	beq.n	80021a6 <HAL_UART_IRQHandler+0xfa>
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b00      	cmp	r3, #0
 800218e:	d104      	bne.n	800219a <HAL_UART_IRQHandler+0xee>
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f043 0208 	orr.w	r2, r3, #8
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 811e 	beq.w	80023ec <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	f003 0320 	and.w	r3, r3, #32
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d007      	beq.n	80021ca <HAL_UART_IRQHandler+0x11e>
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fb59 	bl	800287c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf14      	ite	ne
 80021d8:	2301      	movne	r3, #1
 80021da:	2300      	moveq	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <HAL_UART_IRQHandler+0x146>
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d031      	beq.n	8002256 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fa9b 	bl	800272e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d023      	beq.n	800224e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002214:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221a:	2b00      	cmp	r3, #0
 800221c:	d013      	beq.n	8002246 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	4a76      	ldr	r2, [pc, #472]	; (80023fc <HAL_UART_IRQHandler+0x350>)
 8002224:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fe8e 	bl	8000f4c <HAL_DMA_Abort_IT>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d016      	beq.n	8002264 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002240:	4610      	mov	r0, r2
 8002242:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002244:	e00e      	b.n	8002264 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f8f5 	bl	8002436 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800224c:	e00a      	b.n	8002264 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f8f1 	bl	8002436 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002254:	e006      	b.n	8002264 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f8ed 	bl	8002436 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002262:	e0c3      	b.n	80023ec <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002264:	bf00      	nop
    return;
 8002266:	e0c1      	b.n	80023ec <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	2b01      	cmp	r3, #1
 800226e:	f040 80a1 	bne.w	80023b4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 809b 	beq.w	80023b4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 8095 	beq.w	80023b4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d04e      	beq.n	800234c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80022b8:	8a3b      	ldrh	r3, [r7, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8098 	beq.w	80023f0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022c4:	8a3a      	ldrh	r2, [r7, #16]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	f080 8092 	bcs.w	80023f0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	8a3a      	ldrh	r2, [r7, #16]
 80022d0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b20      	cmp	r3, #32
 80022da:	d02b      	beq.n	8002334 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022ea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0201 	bic.w	r2, r2, #1
 80022fa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800230a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0210 	bic.w	r2, r2, #16
 8002328:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fdd1 	bl	8000ed6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800233c:	b29b      	uxth	r3, r3
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	b29b      	uxth	r3, r3
 8002342:	4619      	mov	r1, r3
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7fe f84b 	bl	80003e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800234a:	e051      	b.n	80023f0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002354:	b29b      	uxth	r3, r3
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d047      	beq.n	80023f4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002364:	8a7b      	ldrh	r3, [r7, #18]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d044      	beq.n	80023f4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002378:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0201 	bic.w	r2, r2, #1
 8002388:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0210 	bic.w	r2, r2, #16
 80023a6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023a8:	8a7b      	ldrh	r3, [r7, #18]
 80023aa:	4619      	mov	r1, r3
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7fe f817 	bl	80003e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80023b2:	e01f      	b.n	80023f4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <HAL_UART_IRQHandler+0x324>
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f9f0 	bl	80027ae <UART_Transmit_IT>
    return;
 80023ce:	e012      	b.n	80023f6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00d      	beq.n	80023f6 <HAL_UART_IRQHandler+0x34a>
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fa31 	bl	800284c <UART_EndTransmit_IT>
    return;
 80023ea:	e004      	b.n	80023f6 <HAL_UART_IRQHandler+0x34a>
    return;
 80023ec:	bf00      	nop
 80023ee:	e002      	b.n	80023f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80023f0:	bf00      	nop
 80023f2:	e000      	b.n	80023f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80023f4:	bf00      	nop
  }
}
 80023f6:	3728      	adds	r7, #40	; 0x28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	08002787 	.word	0x08002787

08002400 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr

08002436 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b00      	cmp	r3, #0
 8002462:	d12a      	bne.n	80024ba <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002478:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002498:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d107      	bne.n	80024ba <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0210 	bic.w	r2, r2, #16
 80024b8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d106      	bne.n	80024d0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024c6:	4619      	mov	r1, r3
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f7fd ff89 	bl	80003e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80024ce:	e002      	b.n	80024d6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff ff9e 	bl	8002412 <HAL_UART_RxCpltCallback>
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d108      	bne.n	8002506 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024f8:	085b      	lsrs	r3, r3, #1
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	4619      	mov	r1, r3
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f7fd ff6e 	bl	80003e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002504:	e002      	b.n	800250c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f7ff ff8c 	bl	8002424 <HAL_UART_RxHalfCpltCallback>
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b21      	cmp	r3, #33	; 0x21
 8002546:	d108      	bne.n	800255a <UART_DMAError+0x46>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2200      	movs	r2, #0
 8002552:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002554:	68b8      	ldr	r0, [r7, #8]
 8002556:	f000 f8d5 	bl	8002704 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b22      	cmp	r3, #34	; 0x22
 800257a:	d108      	bne.n	800258e <UART_DMAError+0x7a>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2200      	movs	r2, #0
 8002586:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002588:	68b8      	ldr	r0, [r7, #8]
 800258a:	f000 f8d0 	bl	800272e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f043 0210 	orr.w	r2, r3, #16
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800259a:	68b8      	ldr	r0, [r7, #8]
 800259c:	f7ff ff4b 	bl	8002436 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025b8:	e02c      	b.n	8002614 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c0:	d028      	beq.n	8002614 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80025c8:	f7fe fa90 	bl	8000aec <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d21d      	bcs.n	8002614 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e00f      	b.n	8002634 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	4013      	ands	r3, r2
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	429a      	cmp	r2, r3
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	429a      	cmp	r2, r3
 8002630:	d0c3      	beq.n	80025ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	4613      	mov	r3, r2
 8002648:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2222      	movs	r2, #34	; 0x22
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002668:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <UART_Start_Receive_DMA+0xbc>)
 800266a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	4a22      	ldr	r2, [pc, #136]	; (80026fc <UART_Start_Receive_DMA+0xc0>)
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	4a21      	ldr	r2, [pc, #132]	; (8002700 <UART_Start_Receive_DMA+0xc4>)
 800267a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002680:	2200      	movs	r2, #0
 8002682:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002684:	f107 0308 	add.w	r3, r7, #8
 8002688:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	3304      	adds	r3, #4
 8002694:	4619      	mov	r1, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	f7fe fbbc 	bl	8000e18 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80026a0:	2300      	movs	r3, #0
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026cc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0201 	orr.w	r2, r2, #1
 80026dc:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026ec:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	08002449 	.word	0x08002449
 80026fc:	080024df 	.word	0x080024df
 8002700:	08002515 	.word	0x08002515

08002704 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800271a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002744:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0201 	bic.w	r2, r2, #1
 8002754:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	2b01      	cmp	r3, #1
 800275c:	d107      	bne.n	800276e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0210 	bic.w	r2, r2, #16
 800276c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f7ff fe48 	bl	8002436 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b21      	cmp	r3, #33	; 0x21
 80027c0:	d13e      	bne.n	8002840 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ca:	d114      	bne.n	80027f6 <UART_Transmit_IT+0x48>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d110      	bne.n	80027f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	1c9a      	adds	r2, r3, #2
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	621a      	str	r2, [r3, #32]
 80027f4:	e008      	b.n	8002808 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	1c59      	adds	r1, r3, #1
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6211      	str	r1, [r2, #32]
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29b      	uxth	r3, r3
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	4619      	mov	r1, r3
 8002816:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10f      	bne.n	800283c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800282a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800283a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	e000      	b.n	8002842 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002840:	2302      	movs	r3, #2
  }
}
 8002842:	4618      	mov	r0, r3
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002862:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff fdc7 	bl	8002400 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b22      	cmp	r3, #34	; 0x22
 800288e:	f040 8099 	bne.w	80029c4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289a:	d117      	bne.n	80028cc <UART_Receive_IT+0x50>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d113      	bne.n	80028cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	1c9a      	adds	r2, r3, #2
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	629a      	str	r2, [r3, #40]	; 0x28
 80028ca:	e026      	b.n	800291a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028de:	d007      	beq.n	80028f0 <UART_Receive_IT+0x74>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10a      	bne.n	80028fe <UART_Receive_IT+0x82>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d106      	bne.n	80028fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	e008      	b.n	8002910 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800290a:	b2da      	uxtb	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29b      	uxth	r3, r3
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	4619      	mov	r1, r3
 8002928:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800292a:	2b00      	cmp	r3, #0
 800292c:	d148      	bne.n	80029c0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0220 	bic.w	r2, r2, #32
 800293c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800294c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0201 	bic.w	r2, r2, #1
 800295c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	2b01      	cmp	r3, #1
 800296c:	d123      	bne.n	80029b6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0210 	bic.w	r2, r2, #16
 8002982:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b10      	cmp	r3, #16
 8002990:	d10a      	bne.n	80029a8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029ac:	4619      	mov	r1, r3
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fd fd16 	bl	80003e0 <HAL_UARTEx_RxEventCallback>
 80029b4:	e002      	b.n	80029bc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff fd2b 	bl	8002412 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	e002      	b.n	80029c6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	e000      	b.n	80029c6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80029c4:	2302      	movs	r3, #2
  }
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a0a:	f023 030c 	bic.w	r3, r3, #12
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	430b      	orrs	r3, r1
 8002a16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a2c      	ldr	r2, [pc, #176]	; (8002ae4 <UART_SetConfig+0x114>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d103      	bne.n	8002a40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a38:	f7ff f9d8 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	e002      	b.n	8002a46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a40:	f7ff f9c0 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002a44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009a      	lsls	r2, r3, #2
 8002a50:	441a      	add	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5c:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <UART_SetConfig+0x118>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	0119      	lsls	r1, r3, #4
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009a      	lsls	r2, r3, #2
 8002a70:	441a      	add	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <UART_SetConfig+0x118>)
 8002a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	2064      	movs	r0, #100	; 0x64
 8002a86:	fb00 f303 	mul.w	r3, r0, r3
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	3332      	adds	r3, #50	; 0x32
 8002a90:	4a15      	ldr	r2, [pc, #84]	; (8002ae8 <UART_SetConfig+0x118>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a9c:	4419      	add	r1, r3
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009a      	lsls	r2, r3, #2
 8002aa8:	441a      	add	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <UART_SetConfig+0x118>)
 8002ab6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	2064      	movs	r0, #100	; 0x64
 8002abe:	fb00 f303 	mul.w	r3, r0, r3
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	3332      	adds	r3, #50	; 0x32
 8002ac8:	4a07      	ldr	r2, [pc, #28]	; (8002ae8 <UART_SetConfig+0x118>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	f003 020f 	and.w	r2, r3, #15
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	440a      	add	r2, r1
 8002ada:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40013800 	.word	0x40013800
 8002ae8:	51eb851f 	.word	0x51eb851f

08002aec <__errno>:
 8002aec:	4b01      	ldr	r3, [pc, #4]	; (8002af4 <__errno+0x8>)
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	2000000c 	.word	0x2000000c

08002af8 <__libc_init_array>:
 8002af8:	b570      	push	{r4, r5, r6, lr}
 8002afa:	2600      	movs	r6, #0
 8002afc:	4d0c      	ldr	r5, [pc, #48]	; (8002b30 <__libc_init_array+0x38>)
 8002afe:	4c0d      	ldr	r4, [pc, #52]	; (8002b34 <__libc_init_array+0x3c>)
 8002b00:	1b64      	subs	r4, r4, r5
 8002b02:	10a4      	asrs	r4, r4, #2
 8002b04:	42a6      	cmp	r6, r4
 8002b06:	d109      	bne.n	8002b1c <__libc_init_array+0x24>
 8002b08:	f000 fc9c 	bl	8003444 <_init>
 8002b0c:	2600      	movs	r6, #0
 8002b0e:	4d0a      	ldr	r5, [pc, #40]	; (8002b38 <__libc_init_array+0x40>)
 8002b10:	4c0a      	ldr	r4, [pc, #40]	; (8002b3c <__libc_init_array+0x44>)
 8002b12:	1b64      	subs	r4, r4, r5
 8002b14:	10a4      	asrs	r4, r4, #2
 8002b16:	42a6      	cmp	r6, r4
 8002b18:	d105      	bne.n	8002b26 <__libc_init_array+0x2e>
 8002b1a:	bd70      	pop	{r4, r5, r6, pc}
 8002b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b20:	4798      	blx	r3
 8002b22:	3601      	adds	r6, #1
 8002b24:	e7ee      	b.n	8002b04 <__libc_init_array+0xc>
 8002b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b2a:	4798      	blx	r3
 8002b2c:	3601      	adds	r6, #1
 8002b2e:	e7f2      	b.n	8002b16 <__libc_init_array+0x1e>
 8002b30:	080034e8 	.word	0x080034e8
 8002b34:	080034e8 	.word	0x080034e8
 8002b38:	080034e8 	.word	0x080034e8
 8002b3c:	080034ec 	.word	0x080034ec

08002b40 <memcpy>:
 8002b40:	440a      	add	r2, r1
 8002b42:	4291      	cmp	r1, r2
 8002b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b48:	d100      	bne.n	8002b4c <memcpy+0xc>
 8002b4a:	4770      	bx	lr
 8002b4c:	b510      	push	{r4, lr}
 8002b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b52:	4291      	cmp	r1, r2
 8002b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b58:	d1f9      	bne.n	8002b4e <memcpy+0xe>
 8002b5a:	bd10      	pop	{r4, pc}

08002b5c <memset>:
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	4402      	add	r2, r0
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d100      	bne.n	8002b66 <memset+0xa>
 8002b64:	4770      	bx	lr
 8002b66:	f803 1b01 	strb.w	r1, [r3], #1
 8002b6a:	e7f9      	b.n	8002b60 <memset+0x4>

08002b6c <siprintf>:
 8002b6c:	b40e      	push	{r1, r2, r3}
 8002b6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b72:	b500      	push	{lr}
 8002b74:	b09c      	sub	sp, #112	; 0x70
 8002b76:	ab1d      	add	r3, sp, #116	; 0x74
 8002b78:	9002      	str	r0, [sp, #8]
 8002b7a:	9006      	str	r0, [sp, #24]
 8002b7c:	9107      	str	r1, [sp, #28]
 8002b7e:	9104      	str	r1, [sp, #16]
 8002b80:	4808      	ldr	r0, [pc, #32]	; (8002ba4 <siprintf+0x38>)
 8002b82:	4909      	ldr	r1, [pc, #36]	; (8002ba8 <siprintf+0x3c>)
 8002b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b88:	9105      	str	r1, [sp, #20]
 8002b8a:	6800      	ldr	r0, [r0, #0]
 8002b8c:	a902      	add	r1, sp, #8
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	f000 f868 	bl	8002c64 <_svfiprintf_r>
 8002b94:	2200      	movs	r2, #0
 8002b96:	9b02      	ldr	r3, [sp, #8]
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	b01c      	add	sp, #112	; 0x70
 8002b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ba0:	b003      	add	sp, #12
 8002ba2:	4770      	bx	lr
 8002ba4:	2000000c 	.word	0x2000000c
 8002ba8:	ffff0208 	.word	0xffff0208

08002bac <__ssputs_r>:
 8002bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bb0:	688e      	ldr	r6, [r1, #8]
 8002bb2:	4682      	mov	sl, r0
 8002bb4:	429e      	cmp	r6, r3
 8002bb6:	460c      	mov	r4, r1
 8002bb8:	4690      	mov	r8, r2
 8002bba:	461f      	mov	r7, r3
 8002bbc:	d838      	bhi.n	8002c30 <__ssputs_r+0x84>
 8002bbe:	898a      	ldrh	r2, [r1, #12]
 8002bc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bc4:	d032      	beq.n	8002c2c <__ssputs_r+0x80>
 8002bc6:	6825      	ldr	r5, [r4, #0]
 8002bc8:	6909      	ldr	r1, [r1, #16]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	eba5 0901 	sub.w	r9, r5, r1
 8002bd0:	6965      	ldr	r5, [r4, #20]
 8002bd2:	444b      	add	r3, r9
 8002bd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bdc:	106d      	asrs	r5, r5, #1
 8002bde:	429d      	cmp	r5, r3
 8002be0:	bf38      	it	cc
 8002be2:	461d      	movcc	r5, r3
 8002be4:	0553      	lsls	r3, r2, #21
 8002be6:	d531      	bpl.n	8002c4c <__ssputs_r+0xa0>
 8002be8:	4629      	mov	r1, r5
 8002bea:	f000 fb61 	bl	80032b0 <_malloc_r>
 8002bee:	4606      	mov	r6, r0
 8002bf0:	b950      	cbnz	r0, 8002c08 <__ssputs_r+0x5c>
 8002bf2:	230c      	movs	r3, #12
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf8:	f8ca 3000 	str.w	r3, [sl]
 8002bfc:	89a3      	ldrh	r3, [r4, #12]
 8002bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c02:	81a3      	strh	r3, [r4, #12]
 8002c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c08:	464a      	mov	r2, r9
 8002c0a:	6921      	ldr	r1, [r4, #16]
 8002c0c:	f7ff ff98 	bl	8002b40 <memcpy>
 8002c10:	89a3      	ldrh	r3, [r4, #12]
 8002c12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c1a:	81a3      	strh	r3, [r4, #12]
 8002c1c:	6126      	str	r6, [r4, #16]
 8002c1e:	444e      	add	r6, r9
 8002c20:	6026      	str	r6, [r4, #0]
 8002c22:	463e      	mov	r6, r7
 8002c24:	6165      	str	r5, [r4, #20]
 8002c26:	eba5 0509 	sub.w	r5, r5, r9
 8002c2a:	60a5      	str	r5, [r4, #8]
 8002c2c:	42be      	cmp	r6, r7
 8002c2e:	d900      	bls.n	8002c32 <__ssputs_r+0x86>
 8002c30:	463e      	mov	r6, r7
 8002c32:	4632      	mov	r2, r6
 8002c34:	4641      	mov	r1, r8
 8002c36:	6820      	ldr	r0, [r4, #0]
 8002c38:	f000 fab8 	bl	80031ac <memmove>
 8002c3c:	68a3      	ldr	r3, [r4, #8]
 8002c3e:	2000      	movs	r0, #0
 8002c40:	1b9b      	subs	r3, r3, r6
 8002c42:	60a3      	str	r3, [r4, #8]
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	4433      	add	r3, r6
 8002c48:	6023      	str	r3, [r4, #0]
 8002c4a:	e7db      	b.n	8002c04 <__ssputs_r+0x58>
 8002c4c:	462a      	mov	r2, r5
 8002c4e:	f000 fba3 	bl	8003398 <_realloc_r>
 8002c52:	4606      	mov	r6, r0
 8002c54:	2800      	cmp	r0, #0
 8002c56:	d1e1      	bne.n	8002c1c <__ssputs_r+0x70>
 8002c58:	4650      	mov	r0, sl
 8002c5a:	6921      	ldr	r1, [r4, #16]
 8002c5c:	f000 fac0 	bl	80031e0 <_free_r>
 8002c60:	e7c7      	b.n	8002bf2 <__ssputs_r+0x46>
	...

08002c64 <_svfiprintf_r>:
 8002c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c68:	4698      	mov	r8, r3
 8002c6a:	898b      	ldrh	r3, [r1, #12]
 8002c6c:	4607      	mov	r7, r0
 8002c6e:	061b      	lsls	r3, r3, #24
 8002c70:	460d      	mov	r5, r1
 8002c72:	4614      	mov	r4, r2
 8002c74:	b09d      	sub	sp, #116	; 0x74
 8002c76:	d50e      	bpl.n	8002c96 <_svfiprintf_r+0x32>
 8002c78:	690b      	ldr	r3, [r1, #16]
 8002c7a:	b963      	cbnz	r3, 8002c96 <_svfiprintf_r+0x32>
 8002c7c:	2140      	movs	r1, #64	; 0x40
 8002c7e:	f000 fb17 	bl	80032b0 <_malloc_r>
 8002c82:	6028      	str	r0, [r5, #0]
 8002c84:	6128      	str	r0, [r5, #16]
 8002c86:	b920      	cbnz	r0, 8002c92 <_svfiprintf_r+0x2e>
 8002c88:	230c      	movs	r3, #12
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c90:	e0d1      	b.n	8002e36 <_svfiprintf_r+0x1d2>
 8002c92:	2340      	movs	r3, #64	; 0x40
 8002c94:	616b      	str	r3, [r5, #20]
 8002c96:	2300      	movs	r3, #0
 8002c98:	9309      	str	r3, [sp, #36]	; 0x24
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ca0:	2330      	movs	r3, #48	; 0x30
 8002ca2:	f04f 0901 	mov.w	r9, #1
 8002ca6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002caa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002e50 <_svfiprintf_r+0x1ec>
 8002cae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cb2:	4623      	mov	r3, r4
 8002cb4:	469a      	mov	sl, r3
 8002cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cba:	b10a      	cbz	r2, 8002cc0 <_svfiprintf_r+0x5c>
 8002cbc:	2a25      	cmp	r2, #37	; 0x25
 8002cbe:	d1f9      	bne.n	8002cb4 <_svfiprintf_r+0x50>
 8002cc0:	ebba 0b04 	subs.w	fp, sl, r4
 8002cc4:	d00b      	beq.n	8002cde <_svfiprintf_r+0x7a>
 8002cc6:	465b      	mov	r3, fp
 8002cc8:	4622      	mov	r2, r4
 8002cca:	4629      	mov	r1, r5
 8002ccc:	4638      	mov	r0, r7
 8002cce:	f7ff ff6d 	bl	8002bac <__ssputs_r>
 8002cd2:	3001      	adds	r0, #1
 8002cd4:	f000 80aa 	beq.w	8002e2c <_svfiprintf_r+0x1c8>
 8002cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cda:	445a      	add	r2, fp
 8002cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8002cde:	f89a 3000 	ldrb.w	r3, [sl]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80a2 	beq.w	8002e2c <_svfiprintf_r+0x1c8>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f04f 32ff 	mov.w	r2, #4294967295
 8002cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cf2:	f10a 0a01 	add.w	sl, sl, #1
 8002cf6:	9304      	str	r3, [sp, #16]
 8002cf8:	9307      	str	r3, [sp, #28]
 8002cfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cfe:	931a      	str	r3, [sp, #104]	; 0x68
 8002d00:	4654      	mov	r4, sl
 8002d02:	2205      	movs	r2, #5
 8002d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d08:	4851      	ldr	r0, [pc, #324]	; (8002e50 <_svfiprintf_r+0x1ec>)
 8002d0a:	f000 fa41 	bl	8003190 <memchr>
 8002d0e:	9a04      	ldr	r2, [sp, #16]
 8002d10:	b9d8      	cbnz	r0, 8002d4a <_svfiprintf_r+0xe6>
 8002d12:	06d0      	lsls	r0, r2, #27
 8002d14:	bf44      	itt	mi
 8002d16:	2320      	movmi	r3, #32
 8002d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d1c:	0711      	lsls	r1, r2, #28
 8002d1e:	bf44      	itt	mi
 8002d20:	232b      	movmi	r3, #43	; 0x2b
 8002d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d26:	f89a 3000 	ldrb.w	r3, [sl]
 8002d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8002d2c:	d015      	beq.n	8002d5a <_svfiprintf_r+0xf6>
 8002d2e:	4654      	mov	r4, sl
 8002d30:	2000      	movs	r0, #0
 8002d32:	f04f 0c0a 	mov.w	ip, #10
 8002d36:	9a07      	ldr	r2, [sp, #28]
 8002d38:	4621      	mov	r1, r4
 8002d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d3e:	3b30      	subs	r3, #48	; 0x30
 8002d40:	2b09      	cmp	r3, #9
 8002d42:	d94e      	bls.n	8002de2 <_svfiprintf_r+0x17e>
 8002d44:	b1b0      	cbz	r0, 8002d74 <_svfiprintf_r+0x110>
 8002d46:	9207      	str	r2, [sp, #28]
 8002d48:	e014      	b.n	8002d74 <_svfiprintf_r+0x110>
 8002d4a:	eba0 0308 	sub.w	r3, r0, r8
 8002d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8002d52:	4313      	orrs	r3, r2
 8002d54:	46a2      	mov	sl, r4
 8002d56:	9304      	str	r3, [sp, #16]
 8002d58:	e7d2      	b.n	8002d00 <_svfiprintf_r+0x9c>
 8002d5a:	9b03      	ldr	r3, [sp, #12]
 8002d5c:	1d19      	adds	r1, r3, #4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	9103      	str	r1, [sp, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	bfbb      	ittet	lt
 8002d66:	425b      	neglt	r3, r3
 8002d68:	f042 0202 	orrlt.w	r2, r2, #2
 8002d6c:	9307      	strge	r3, [sp, #28]
 8002d6e:	9307      	strlt	r3, [sp, #28]
 8002d70:	bfb8      	it	lt
 8002d72:	9204      	strlt	r2, [sp, #16]
 8002d74:	7823      	ldrb	r3, [r4, #0]
 8002d76:	2b2e      	cmp	r3, #46	; 0x2e
 8002d78:	d10c      	bne.n	8002d94 <_svfiprintf_r+0x130>
 8002d7a:	7863      	ldrb	r3, [r4, #1]
 8002d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d7e:	d135      	bne.n	8002dec <_svfiprintf_r+0x188>
 8002d80:	9b03      	ldr	r3, [sp, #12]
 8002d82:	3402      	adds	r4, #2
 8002d84:	1d1a      	adds	r2, r3, #4
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	9203      	str	r2, [sp, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bfb8      	it	lt
 8002d8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d92:	9305      	str	r3, [sp, #20]
 8002d94:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002e54 <_svfiprintf_r+0x1f0>
 8002d98:	2203      	movs	r2, #3
 8002d9a:	4650      	mov	r0, sl
 8002d9c:	7821      	ldrb	r1, [r4, #0]
 8002d9e:	f000 f9f7 	bl	8003190 <memchr>
 8002da2:	b140      	cbz	r0, 8002db6 <_svfiprintf_r+0x152>
 8002da4:	2340      	movs	r3, #64	; 0x40
 8002da6:	eba0 000a 	sub.w	r0, r0, sl
 8002daa:	fa03 f000 	lsl.w	r0, r3, r0
 8002dae:	9b04      	ldr	r3, [sp, #16]
 8002db0:	3401      	adds	r4, #1
 8002db2:	4303      	orrs	r3, r0
 8002db4:	9304      	str	r3, [sp, #16]
 8002db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dba:	2206      	movs	r2, #6
 8002dbc:	4826      	ldr	r0, [pc, #152]	; (8002e58 <_svfiprintf_r+0x1f4>)
 8002dbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002dc2:	f000 f9e5 	bl	8003190 <memchr>
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	d038      	beq.n	8002e3c <_svfiprintf_r+0x1d8>
 8002dca:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <_svfiprintf_r+0x1f8>)
 8002dcc:	bb1b      	cbnz	r3, 8002e16 <_svfiprintf_r+0x1b2>
 8002dce:	9b03      	ldr	r3, [sp, #12]
 8002dd0:	3307      	adds	r3, #7
 8002dd2:	f023 0307 	bic.w	r3, r3, #7
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	9303      	str	r3, [sp, #12]
 8002dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ddc:	4433      	add	r3, r6
 8002dde:	9309      	str	r3, [sp, #36]	; 0x24
 8002de0:	e767      	b.n	8002cb2 <_svfiprintf_r+0x4e>
 8002de2:	460c      	mov	r4, r1
 8002de4:	2001      	movs	r0, #1
 8002de6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dea:	e7a5      	b.n	8002d38 <_svfiprintf_r+0xd4>
 8002dec:	2300      	movs	r3, #0
 8002dee:	f04f 0c0a 	mov.w	ip, #10
 8002df2:	4619      	mov	r1, r3
 8002df4:	3401      	adds	r4, #1
 8002df6:	9305      	str	r3, [sp, #20]
 8002df8:	4620      	mov	r0, r4
 8002dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dfe:	3a30      	subs	r2, #48	; 0x30
 8002e00:	2a09      	cmp	r2, #9
 8002e02:	d903      	bls.n	8002e0c <_svfiprintf_r+0x1a8>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0c5      	beq.n	8002d94 <_svfiprintf_r+0x130>
 8002e08:	9105      	str	r1, [sp, #20]
 8002e0a:	e7c3      	b.n	8002d94 <_svfiprintf_r+0x130>
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	2301      	movs	r3, #1
 8002e10:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e14:	e7f0      	b.n	8002df8 <_svfiprintf_r+0x194>
 8002e16:	ab03      	add	r3, sp, #12
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	462a      	mov	r2, r5
 8002e1c:	4638      	mov	r0, r7
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <_svfiprintf_r+0x1fc>)
 8002e20:	a904      	add	r1, sp, #16
 8002e22:	f3af 8000 	nop.w
 8002e26:	1c42      	adds	r2, r0, #1
 8002e28:	4606      	mov	r6, r0
 8002e2a:	d1d6      	bne.n	8002dda <_svfiprintf_r+0x176>
 8002e2c:	89ab      	ldrh	r3, [r5, #12]
 8002e2e:	065b      	lsls	r3, r3, #25
 8002e30:	f53f af2c 	bmi.w	8002c8c <_svfiprintf_r+0x28>
 8002e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e36:	b01d      	add	sp, #116	; 0x74
 8002e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e3c:	ab03      	add	r3, sp, #12
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	462a      	mov	r2, r5
 8002e42:	4638      	mov	r0, r7
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <_svfiprintf_r+0x1fc>)
 8002e46:	a904      	add	r1, sp, #16
 8002e48:	f000 f87c 	bl	8002f44 <_printf_i>
 8002e4c:	e7eb      	b.n	8002e26 <_svfiprintf_r+0x1c2>
 8002e4e:	bf00      	nop
 8002e50:	080034b4 	.word	0x080034b4
 8002e54:	080034ba 	.word	0x080034ba
 8002e58:	080034be 	.word	0x080034be
 8002e5c:	00000000 	.word	0x00000000
 8002e60:	08002bad 	.word	0x08002bad

08002e64 <_printf_common>:
 8002e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e68:	4616      	mov	r6, r2
 8002e6a:	4699      	mov	r9, r3
 8002e6c:	688a      	ldr	r2, [r1, #8]
 8002e6e:	690b      	ldr	r3, [r1, #16]
 8002e70:	4607      	mov	r7, r0
 8002e72:	4293      	cmp	r3, r2
 8002e74:	bfb8      	it	lt
 8002e76:	4613      	movlt	r3, r2
 8002e78:	6033      	str	r3, [r6, #0]
 8002e7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e7e:	460c      	mov	r4, r1
 8002e80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e84:	b10a      	cbz	r2, 8002e8a <_printf_common+0x26>
 8002e86:	3301      	adds	r3, #1
 8002e88:	6033      	str	r3, [r6, #0]
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	0699      	lsls	r1, r3, #26
 8002e8e:	bf42      	ittt	mi
 8002e90:	6833      	ldrmi	r3, [r6, #0]
 8002e92:	3302      	addmi	r3, #2
 8002e94:	6033      	strmi	r3, [r6, #0]
 8002e96:	6825      	ldr	r5, [r4, #0]
 8002e98:	f015 0506 	ands.w	r5, r5, #6
 8002e9c:	d106      	bne.n	8002eac <_printf_common+0x48>
 8002e9e:	f104 0a19 	add.w	sl, r4, #25
 8002ea2:	68e3      	ldr	r3, [r4, #12]
 8002ea4:	6832      	ldr	r2, [r6, #0]
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	42ab      	cmp	r3, r5
 8002eaa:	dc28      	bgt.n	8002efe <_printf_common+0x9a>
 8002eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002eb0:	1e13      	subs	r3, r2, #0
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	bf18      	it	ne
 8002eb6:	2301      	movne	r3, #1
 8002eb8:	0692      	lsls	r2, r2, #26
 8002eba:	d42d      	bmi.n	8002f18 <_printf_common+0xb4>
 8002ebc:	4649      	mov	r1, r9
 8002ebe:	4638      	mov	r0, r7
 8002ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ec4:	47c0      	blx	r8
 8002ec6:	3001      	adds	r0, #1
 8002ec8:	d020      	beq.n	8002f0c <_printf_common+0xa8>
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	68e5      	ldr	r5, [r4, #12]
 8002ece:	f003 0306 	and.w	r3, r3, #6
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	bf18      	it	ne
 8002ed6:	2500      	movne	r5, #0
 8002ed8:	6832      	ldr	r2, [r6, #0]
 8002eda:	f04f 0600 	mov.w	r6, #0
 8002ede:	68a3      	ldr	r3, [r4, #8]
 8002ee0:	bf08      	it	eq
 8002ee2:	1aad      	subeq	r5, r5, r2
 8002ee4:	6922      	ldr	r2, [r4, #16]
 8002ee6:	bf08      	it	eq
 8002ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002eec:	4293      	cmp	r3, r2
 8002eee:	bfc4      	itt	gt
 8002ef0:	1a9b      	subgt	r3, r3, r2
 8002ef2:	18ed      	addgt	r5, r5, r3
 8002ef4:	341a      	adds	r4, #26
 8002ef6:	42b5      	cmp	r5, r6
 8002ef8:	d11a      	bne.n	8002f30 <_printf_common+0xcc>
 8002efa:	2000      	movs	r0, #0
 8002efc:	e008      	b.n	8002f10 <_printf_common+0xac>
 8002efe:	2301      	movs	r3, #1
 8002f00:	4652      	mov	r2, sl
 8002f02:	4649      	mov	r1, r9
 8002f04:	4638      	mov	r0, r7
 8002f06:	47c0      	blx	r8
 8002f08:	3001      	adds	r0, #1
 8002f0a:	d103      	bne.n	8002f14 <_printf_common+0xb0>
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f14:	3501      	adds	r5, #1
 8002f16:	e7c4      	b.n	8002ea2 <_printf_common+0x3e>
 8002f18:	2030      	movs	r0, #48	; 0x30
 8002f1a:	18e1      	adds	r1, r4, r3
 8002f1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f26:	4422      	add	r2, r4
 8002f28:	3302      	adds	r3, #2
 8002f2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f2e:	e7c5      	b.n	8002ebc <_printf_common+0x58>
 8002f30:	2301      	movs	r3, #1
 8002f32:	4622      	mov	r2, r4
 8002f34:	4649      	mov	r1, r9
 8002f36:	4638      	mov	r0, r7
 8002f38:	47c0      	blx	r8
 8002f3a:	3001      	adds	r0, #1
 8002f3c:	d0e6      	beq.n	8002f0c <_printf_common+0xa8>
 8002f3e:	3601      	adds	r6, #1
 8002f40:	e7d9      	b.n	8002ef6 <_printf_common+0x92>
	...

08002f44 <_printf_i>:
 8002f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f48:	7e0f      	ldrb	r7, [r1, #24]
 8002f4a:	4691      	mov	r9, r2
 8002f4c:	2f78      	cmp	r7, #120	; 0x78
 8002f4e:	4680      	mov	r8, r0
 8002f50:	460c      	mov	r4, r1
 8002f52:	469a      	mov	sl, r3
 8002f54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f5a:	d807      	bhi.n	8002f6c <_printf_i+0x28>
 8002f5c:	2f62      	cmp	r7, #98	; 0x62
 8002f5e:	d80a      	bhi.n	8002f76 <_printf_i+0x32>
 8002f60:	2f00      	cmp	r7, #0
 8002f62:	f000 80d9 	beq.w	8003118 <_printf_i+0x1d4>
 8002f66:	2f58      	cmp	r7, #88	; 0x58
 8002f68:	f000 80a4 	beq.w	80030b4 <_printf_i+0x170>
 8002f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f74:	e03a      	b.n	8002fec <_printf_i+0xa8>
 8002f76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f7a:	2b15      	cmp	r3, #21
 8002f7c:	d8f6      	bhi.n	8002f6c <_printf_i+0x28>
 8002f7e:	a101      	add	r1, pc, #4	; (adr r1, 8002f84 <_printf_i+0x40>)
 8002f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f84:	08002fdd 	.word	0x08002fdd
 8002f88:	08002ff1 	.word	0x08002ff1
 8002f8c:	08002f6d 	.word	0x08002f6d
 8002f90:	08002f6d 	.word	0x08002f6d
 8002f94:	08002f6d 	.word	0x08002f6d
 8002f98:	08002f6d 	.word	0x08002f6d
 8002f9c:	08002ff1 	.word	0x08002ff1
 8002fa0:	08002f6d 	.word	0x08002f6d
 8002fa4:	08002f6d 	.word	0x08002f6d
 8002fa8:	08002f6d 	.word	0x08002f6d
 8002fac:	08002f6d 	.word	0x08002f6d
 8002fb0:	080030ff 	.word	0x080030ff
 8002fb4:	08003021 	.word	0x08003021
 8002fb8:	080030e1 	.word	0x080030e1
 8002fbc:	08002f6d 	.word	0x08002f6d
 8002fc0:	08002f6d 	.word	0x08002f6d
 8002fc4:	08003121 	.word	0x08003121
 8002fc8:	08002f6d 	.word	0x08002f6d
 8002fcc:	08003021 	.word	0x08003021
 8002fd0:	08002f6d 	.word	0x08002f6d
 8002fd4:	08002f6d 	.word	0x08002f6d
 8002fd8:	080030e9 	.word	0x080030e9
 8002fdc:	682b      	ldr	r3, [r5, #0]
 8002fde:	1d1a      	adds	r2, r3, #4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	602a      	str	r2, [r5, #0]
 8002fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0a4      	b.n	800313a <_printf_i+0x1f6>
 8002ff0:	6820      	ldr	r0, [r4, #0]
 8002ff2:	6829      	ldr	r1, [r5, #0]
 8002ff4:	0606      	lsls	r6, r0, #24
 8002ff6:	f101 0304 	add.w	r3, r1, #4
 8002ffa:	d50a      	bpl.n	8003012 <_printf_i+0xce>
 8002ffc:	680e      	ldr	r6, [r1, #0]
 8002ffe:	602b      	str	r3, [r5, #0]
 8003000:	2e00      	cmp	r6, #0
 8003002:	da03      	bge.n	800300c <_printf_i+0xc8>
 8003004:	232d      	movs	r3, #45	; 0x2d
 8003006:	4276      	negs	r6, r6
 8003008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800300c:	230a      	movs	r3, #10
 800300e:	485e      	ldr	r0, [pc, #376]	; (8003188 <_printf_i+0x244>)
 8003010:	e019      	b.n	8003046 <_printf_i+0x102>
 8003012:	680e      	ldr	r6, [r1, #0]
 8003014:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003018:	602b      	str	r3, [r5, #0]
 800301a:	bf18      	it	ne
 800301c:	b236      	sxthne	r6, r6
 800301e:	e7ef      	b.n	8003000 <_printf_i+0xbc>
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	6820      	ldr	r0, [r4, #0]
 8003024:	1d19      	adds	r1, r3, #4
 8003026:	6029      	str	r1, [r5, #0]
 8003028:	0601      	lsls	r1, r0, #24
 800302a:	d501      	bpl.n	8003030 <_printf_i+0xec>
 800302c:	681e      	ldr	r6, [r3, #0]
 800302e:	e002      	b.n	8003036 <_printf_i+0xf2>
 8003030:	0646      	lsls	r6, r0, #25
 8003032:	d5fb      	bpl.n	800302c <_printf_i+0xe8>
 8003034:	881e      	ldrh	r6, [r3, #0]
 8003036:	2f6f      	cmp	r7, #111	; 0x6f
 8003038:	bf0c      	ite	eq
 800303a:	2308      	moveq	r3, #8
 800303c:	230a      	movne	r3, #10
 800303e:	4852      	ldr	r0, [pc, #328]	; (8003188 <_printf_i+0x244>)
 8003040:	2100      	movs	r1, #0
 8003042:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003046:	6865      	ldr	r5, [r4, #4]
 8003048:	2d00      	cmp	r5, #0
 800304a:	bfa8      	it	ge
 800304c:	6821      	ldrge	r1, [r4, #0]
 800304e:	60a5      	str	r5, [r4, #8]
 8003050:	bfa4      	itt	ge
 8003052:	f021 0104 	bicge.w	r1, r1, #4
 8003056:	6021      	strge	r1, [r4, #0]
 8003058:	b90e      	cbnz	r6, 800305e <_printf_i+0x11a>
 800305a:	2d00      	cmp	r5, #0
 800305c:	d04d      	beq.n	80030fa <_printf_i+0x1b6>
 800305e:	4615      	mov	r5, r2
 8003060:	fbb6 f1f3 	udiv	r1, r6, r3
 8003064:	fb03 6711 	mls	r7, r3, r1, r6
 8003068:	5dc7      	ldrb	r7, [r0, r7]
 800306a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800306e:	4637      	mov	r7, r6
 8003070:	42bb      	cmp	r3, r7
 8003072:	460e      	mov	r6, r1
 8003074:	d9f4      	bls.n	8003060 <_printf_i+0x11c>
 8003076:	2b08      	cmp	r3, #8
 8003078:	d10b      	bne.n	8003092 <_printf_i+0x14e>
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	07de      	lsls	r6, r3, #31
 800307e:	d508      	bpl.n	8003092 <_printf_i+0x14e>
 8003080:	6923      	ldr	r3, [r4, #16]
 8003082:	6861      	ldr	r1, [r4, #4]
 8003084:	4299      	cmp	r1, r3
 8003086:	bfde      	ittt	le
 8003088:	2330      	movle	r3, #48	; 0x30
 800308a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800308e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003092:	1b52      	subs	r2, r2, r5
 8003094:	6122      	str	r2, [r4, #16]
 8003096:	464b      	mov	r3, r9
 8003098:	4621      	mov	r1, r4
 800309a:	4640      	mov	r0, r8
 800309c:	f8cd a000 	str.w	sl, [sp]
 80030a0:	aa03      	add	r2, sp, #12
 80030a2:	f7ff fedf 	bl	8002e64 <_printf_common>
 80030a6:	3001      	adds	r0, #1
 80030a8:	d14c      	bne.n	8003144 <_printf_i+0x200>
 80030aa:	f04f 30ff 	mov.w	r0, #4294967295
 80030ae:	b004      	add	sp, #16
 80030b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030b4:	4834      	ldr	r0, [pc, #208]	; (8003188 <_printf_i+0x244>)
 80030b6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80030ba:	6829      	ldr	r1, [r5, #0]
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	f851 6b04 	ldr.w	r6, [r1], #4
 80030c2:	6029      	str	r1, [r5, #0]
 80030c4:	061d      	lsls	r5, r3, #24
 80030c6:	d514      	bpl.n	80030f2 <_printf_i+0x1ae>
 80030c8:	07df      	lsls	r7, r3, #31
 80030ca:	bf44      	itt	mi
 80030cc:	f043 0320 	orrmi.w	r3, r3, #32
 80030d0:	6023      	strmi	r3, [r4, #0]
 80030d2:	b91e      	cbnz	r6, 80030dc <_printf_i+0x198>
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	f023 0320 	bic.w	r3, r3, #32
 80030da:	6023      	str	r3, [r4, #0]
 80030dc:	2310      	movs	r3, #16
 80030de:	e7af      	b.n	8003040 <_printf_i+0xfc>
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	f043 0320 	orr.w	r3, r3, #32
 80030e6:	6023      	str	r3, [r4, #0]
 80030e8:	2378      	movs	r3, #120	; 0x78
 80030ea:	4828      	ldr	r0, [pc, #160]	; (800318c <_printf_i+0x248>)
 80030ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030f0:	e7e3      	b.n	80030ba <_printf_i+0x176>
 80030f2:	0659      	lsls	r1, r3, #25
 80030f4:	bf48      	it	mi
 80030f6:	b2b6      	uxthmi	r6, r6
 80030f8:	e7e6      	b.n	80030c8 <_printf_i+0x184>
 80030fa:	4615      	mov	r5, r2
 80030fc:	e7bb      	b.n	8003076 <_printf_i+0x132>
 80030fe:	682b      	ldr	r3, [r5, #0]
 8003100:	6826      	ldr	r6, [r4, #0]
 8003102:	1d18      	adds	r0, r3, #4
 8003104:	6961      	ldr	r1, [r4, #20]
 8003106:	6028      	str	r0, [r5, #0]
 8003108:	0635      	lsls	r5, r6, #24
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	d501      	bpl.n	8003112 <_printf_i+0x1ce>
 800310e:	6019      	str	r1, [r3, #0]
 8003110:	e002      	b.n	8003118 <_printf_i+0x1d4>
 8003112:	0670      	lsls	r0, r6, #25
 8003114:	d5fb      	bpl.n	800310e <_printf_i+0x1ca>
 8003116:	8019      	strh	r1, [r3, #0]
 8003118:	2300      	movs	r3, #0
 800311a:	4615      	mov	r5, r2
 800311c:	6123      	str	r3, [r4, #16]
 800311e:	e7ba      	b.n	8003096 <_printf_i+0x152>
 8003120:	682b      	ldr	r3, [r5, #0]
 8003122:	2100      	movs	r1, #0
 8003124:	1d1a      	adds	r2, r3, #4
 8003126:	602a      	str	r2, [r5, #0]
 8003128:	681d      	ldr	r5, [r3, #0]
 800312a:	6862      	ldr	r2, [r4, #4]
 800312c:	4628      	mov	r0, r5
 800312e:	f000 f82f 	bl	8003190 <memchr>
 8003132:	b108      	cbz	r0, 8003138 <_printf_i+0x1f4>
 8003134:	1b40      	subs	r0, r0, r5
 8003136:	6060      	str	r0, [r4, #4]
 8003138:	6863      	ldr	r3, [r4, #4]
 800313a:	6123      	str	r3, [r4, #16]
 800313c:	2300      	movs	r3, #0
 800313e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003142:	e7a8      	b.n	8003096 <_printf_i+0x152>
 8003144:	462a      	mov	r2, r5
 8003146:	4649      	mov	r1, r9
 8003148:	4640      	mov	r0, r8
 800314a:	6923      	ldr	r3, [r4, #16]
 800314c:	47d0      	blx	sl
 800314e:	3001      	adds	r0, #1
 8003150:	d0ab      	beq.n	80030aa <_printf_i+0x166>
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	079b      	lsls	r3, r3, #30
 8003156:	d413      	bmi.n	8003180 <_printf_i+0x23c>
 8003158:	68e0      	ldr	r0, [r4, #12]
 800315a:	9b03      	ldr	r3, [sp, #12]
 800315c:	4298      	cmp	r0, r3
 800315e:	bfb8      	it	lt
 8003160:	4618      	movlt	r0, r3
 8003162:	e7a4      	b.n	80030ae <_printf_i+0x16a>
 8003164:	2301      	movs	r3, #1
 8003166:	4632      	mov	r2, r6
 8003168:	4649      	mov	r1, r9
 800316a:	4640      	mov	r0, r8
 800316c:	47d0      	blx	sl
 800316e:	3001      	adds	r0, #1
 8003170:	d09b      	beq.n	80030aa <_printf_i+0x166>
 8003172:	3501      	adds	r5, #1
 8003174:	68e3      	ldr	r3, [r4, #12]
 8003176:	9903      	ldr	r1, [sp, #12]
 8003178:	1a5b      	subs	r3, r3, r1
 800317a:	42ab      	cmp	r3, r5
 800317c:	dcf2      	bgt.n	8003164 <_printf_i+0x220>
 800317e:	e7eb      	b.n	8003158 <_printf_i+0x214>
 8003180:	2500      	movs	r5, #0
 8003182:	f104 0619 	add.w	r6, r4, #25
 8003186:	e7f5      	b.n	8003174 <_printf_i+0x230>
 8003188:	080034c5 	.word	0x080034c5
 800318c:	080034d6 	.word	0x080034d6

08003190 <memchr>:
 8003190:	4603      	mov	r3, r0
 8003192:	b510      	push	{r4, lr}
 8003194:	b2c9      	uxtb	r1, r1
 8003196:	4402      	add	r2, r0
 8003198:	4293      	cmp	r3, r2
 800319a:	4618      	mov	r0, r3
 800319c:	d101      	bne.n	80031a2 <memchr+0x12>
 800319e:	2000      	movs	r0, #0
 80031a0:	e003      	b.n	80031aa <memchr+0x1a>
 80031a2:	7804      	ldrb	r4, [r0, #0]
 80031a4:	3301      	adds	r3, #1
 80031a6:	428c      	cmp	r4, r1
 80031a8:	d1f6      	bne.n	8003198 <memchr+0x8>
 80031aa:	bd10      	pop	{r4, pc}

080031ac <memmove>:
 80031ac:	4288      	cmp	r0, r1
 80031ae:	b510      	push	{r4, lr}
 80031b0:	eb01 0402 	add.w	r4, r1, r2
 80031b4:	d902      	bls.n	80031bc <memmove+0x10>
 80031b6:	4284      	cmp	r4, r0
 80031b8:	4623      	mov	r3, r4
 80031ba:	d807      	bhi.n	80031cc <memmove+0x20>
 80031bc:	1e43      	subs	r3, r0, #1
 80031be:	42a1      	cmp	r1, r4
 80031c0:	d008      	beq.n	80031d4 <memmove+0x28>
 80031c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031ca:	e7f8      	b.n	80031be <memmove+0x12>
 80031cc:	4601      	mov	r1, r0
 80031ce:	4402      	add	r2, r0
 80031d0:	428a      	cmp	r2, r1
 80031d2:	d100      	bne.n	80031d6 <memmove+0x2a>
 80031d4:	bd10      	pop	{r4, pc}
 80031d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031de:	e7f7      	b.n	80031d0 <memmove+0x24>

080031e0 <_free_r>:
 80031e0:	b538      	push	{r3, r4, r5, lr}
 80031e2:	4605      	mov	r5, r0
 80031e4:	2900      	cmp	r1, #0
 80031e6:	d040      	beq.n	800326a <_free_r+0x8a>
 80031e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031ec:	1f0c      	subs	r4, r1, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bfb8      	it	lt
 80031f2:	18e4      	addlt	r4, r4, r3
 80031f4:	f000 f910 	bl	8003418 <__malloc_lock>
 80031f8:	4a1c      	ldr	r2, [pc, #112]	; (800326c <_free_r+0x8c>)
 80031fa:	6813      	ldr	r3, [r2, #0]
 80031fc:	b933      	cbnz	r3, 800320c <_free_r+0x2c>
 80031fe:	6063      	str	r3, [r4, #4]
 8003200:	6014      	str	r4, [r2, #0]
 8003202:	4628      	mov	r0, r5
 8003204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003208:	f000 b90c 	b.w	8003424 <__malloc_unlock>
 800320c:	42a3      	cmp	r3, r4
 800320e:	d908      	bls.n	8003222 <_free_r+0x42>
 8003210:	6820      	ldr	r0, [r4, #0]
 8003212:	1821      	adds	r1, r4, r0
 8003214:	428b      	cmp	r3, r1
 8003216:	bf01      	itttt	eq
 8003218:	6819      	ldreq	r1, [r3, #0]
 800321a:	685b      	ldreq	r3, [r3, #4]
 800321c:	1809      	addeq	r1, r1, r0
 800321e:	6021      	streq	r1, [r4, #0]
 8003220:	e7ed      	b.n	80031fe <_free_r+0x1e>
 8003222:	461a      	mov	r2, r3
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	b10b      	cbz	r3, 800322c <_free_r+0x4c>
 8003228:	42a3      	cmp	r3, r4
 800322a:	d9fa      	bls.n	8003222 <_free_r+0x42>
 800322c:	6811      	ldr	r1, [r2, #0]
 800322e:	1850      	adds	r0, r2, r1
 8003230:	42a0      	cmp	r0, r4
 8003232:	d10b      	bne.n	800324c <_free_r+0x6c>
 8003234:	6820      	ldr	r0, [r4, #0]
 8003236:	4401      	add	r1, r0
 8003238:	1850      	adds	r0, r2, r1
 800323a:	4283      	cmp	r3, r0
 800323c:	6011      	str	r1, [r2, #0]
 800323e:	d1e0      	bne.n	8003202 <_free_r+0x22>
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4401      	add	r1, r0
 8003246:	6011      	str	r1, [r2, #0]
 8003248:	6053      	str	r3, [r2, #4]
 800324a:	e7da      	b.n	8003202 <_free_r+0x22>
 800324c:	d902      	bls.n	8003254 <_free_r+0x74>
 800324e:	230c      	movs	r3, #12
 8003250:	602b      	str	r3, [r5, #0]
 8003252:	e7d6      	b.n	8003202 <_free_r+0x22>
 8003254:	6820      	ldr	r0, [r4, #0]
 8003256:	1821      	adds	r1, r4, r0
 8003258:	428b      	cmp	r3, r1
 800325a:	bf01      	itttt	eq
 800325c:	6819      	ldreq	r1, [r3, #0]
 800325e:	685b      	ldreq	r3, [r3, #4]
 8003260:	1809      	addeq	r1, r1, r0
 8003262:	6021      	streq	r1, [r4, #0]
 8003264:	6063      	str	r3, [r4, #4]
 8003266:	6054      	str	r4, [r2, #4]
 8003268:	e7cb      	b.n	8003202 <_free_r+0x22>
 800326a:	bd38      	pop	{r3, r4, r5, pc}
 800326c:	20000164 	.word	0x20000164

08003270 <sbrk_aligned>:
 8003270:	b570      	push	{r4, r5, r6, lr}
 8003272:	4e0e      	ldr	r6, [pc, #56]	; (80032ac <sbrk_aligned+0x3c>)
 8003274:	460c      	mov	r4, r1
 8003276:	6831      	ldr	r1, [r6, #0]
 8003278:	4605      	mov	r5, r0
 800327a:	b911      	cbnz	r1, 8003282 <sbrk_aligned+0x12>
 800327c:	f000 f8bc 	bl	80033f8 <_sbrk_r>
 8003280:	6030      	str	r0, [r6, #0]
 8003282:	4621      	mov	r1, r4
 8003284:	4628      	mov	r0, r5
 8003286:	f000 f8b7 	bl	80033f8 <_sbrk_r>
 800328a:	1c43      	adds	r3, r0, #1
 800328c:	d00a      	beq.n	80032a4 <sbrk_aligned+0x34>
 800328e:	1cc4      	adds	r4, r0, #3
 8003290:	f024 0403 	bic.w	r4, r4, #3
 8003294:	42a0      	cmp	r0, r4
 8003296:	d007      	beq.n	80032a8 <sbrk_aligned+0x38>
 8003298:	1a21      	subs	r1, r4, r0
 800329a:	4628      	mov	r0, r5
 800329c:	f000 f8ac 	bl	80033f8 <_sbrk_r>
 80032a0:	3001      	adds	r0, #1
 80032a2:	d101      	bne.n	80032a8 <sbrk_aligned+0x38>
 80032a4:	f04f 34ff 	mov.w	r4, #4294967295
 80032a8:	4620      	mov	r0, r4
 80032aa:	bd70      	pop	{r4, r5, r6, pc}
 80032ac:	20000168 	.word	0x20000168

080032b0 <_malloc_r>:
 80032b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032b4:	1ccd      	adds	r5, r1, #3
 80032b6:	f025 0503 	bic.w	r5, r5, #3
 80032ba:	3508      	adds	r5, #8
 80032bc:	2d0c      	cmp	r5, #12
 80032be:	bf38      	it	cc
 80032c0:	250c      	movcc	r5, #12
 80032c2:	2d00      	cmp	r5, #0
 80032c4:	4607      	mov	r7, r0
 80032c6:	db01      	blt.n	80032cc <_malloc_r+0x1c>
 80032c8:	42a9      	cmp	r1, r5
 80032ca:	d905      	bls.n	80032d8 <_malloc_r+0x28>
 80032cc:	230c      	movs	r3, #12
 80032ce:	2600      	movs	r6, #0
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	4630      	mov	r0, r6
 80032d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032d8:	4e2e      	ldr	r6, [pc, #184]	; (8003394 <_malloc_r+0xe4>)
 80032da:	f000 f89d 	bl	8003418 <__malloc_lock>
 80032de:	6833      	ldr	r3, [r6, #0]
 80032e0:	461c      	mov	r4, r3
 80032e2:	bb34      	cbnz	r4, 8003332 <_malloc_r+0x82>
 80032e4:	4629      	mov	r1, r5
 80032e6:	4638      	mov	r0, r7
 80032e8:	f7ff ffc2 	bl	8003270 <sbrk_aligned>
 80032ec:	1c43      	adds	r3, r0, #1
 80032ee:	4604      	mov	r4, r0
 80032f0:	d14d      	bne.n	800338e <_malloc_r+0xde>
 80032f2:	6834      	ldr	r4, [r6, #0]
 80032f4:	4626      	mov	r6, r4
 80032f6:	2e00      	cmp	r6, #0
 80032f8:	d140      	bne.n	800337c <_malloc_r+0xcc>
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	4631      	mov	r1, r6
 80032fe:	4638      	mov	r0, r7
 8003300:	eb04 0803 	add.w	r8, r4, r3
 8003304:	f000 f878 	bl	80033f8 <_sbrk_r>
 8003308:	4580      	cmp	r8, r0
 800330a:	d13a      	bne.n	8003382 <_malloc_r+0xd2>
 800330c:	6821      	ldr	r1, [r4, #0]
 800330e:	3503      	adds	r5, #3
 8003310:	1a6d      	subs	r5, r5, r1
 8003312:	f025 0503 	bic.w	r5, r5, #3
 8003316:	3508      	adds	r5, #8
 8003318:	2d0c      	cmp	r5, #12
 800331a:	bf38      	it	cc
 800331c:	250c      	movcc	r5, #12
 800331e:	4638      	mov	r0, r7
 8003320:	4629      	mov	r1, r5
 8003322:	f7ff ffa5 	bl	8003270 <sbrk_aligned>
 8003326:	3001      	adds	r0, #1
 8003328:	d02b      	beq.n	8003382 <_malloc_r+0xd2>
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	442b      	add	r3, r5
 800332e:	6023      	str	r3, [r4, #0]
 8003330:	e00e      	b.n	8003350 <_malloc_r+0xa0>
 8003332:	6822      	ldr	r2, [r4, #0]
 8003334:	1b52      	subs	r2, r2, r5
 8003336:	d41e      	bmi.n	8003376 <_malloc_r+0xc6>
 8003338:	2a0b      	cmp	r2, #11
 800333a:	d916      	bls.n	800336a <_malloc_r+0xba>
 800333c:	1961      	adds	r1, r4, r5
 800333e:	42a3      	cmp	r3, r4
 8003340:	6025      	str	r5, [r4, #0]
 8003342:	bf18      	it	ne
 8003344:	6059      	strne	r1, [r3, #4]
 8003346:	6863      	ldr	r3, [r4, #4]
 8003348:	bf08      	it	eq
 800334a:	6031      	streq	r1, [r6, #0]
 800334c:	5162      	str	r2, [r4, r5]
 800334e:	604b      	str	r3, [r1, #4]
 8003350:	4638      	mov	r0, r7
 8003352:	f104 060b 	add.w	r6, r4, #11
 8003356:	f000 f865 	bl	8003424 <__malloc_unlock>
 800335a:	f026 0607 	bic.w	r6, r6, #7
 800335e:	1d23      	adds	r3, r4, #4
 8003360:	1af2      	subs	r2, r6, r3
 8003362:	d0b6      	beq.n	80032d2 <_malloc_r+0x22>
 8003364:	1b9b      	subs	r3, r3, r6
 8003366:	50a3      	str	r3, [r4, r2]
 8003368:	e7b3      	b.n	80032d2 <_malloc_r+0x22>
 800336a:	6862      	ldr	r2, [r4, #4]
 800336c:	42a3      	cmp	r3, r4
 800336e:	bf0c      	ite	eq
 8003370:	6032      	streq	r2, [r6, #0]
 8003372:	605a      	strne	r2, [r3, #4]
 8003374:	e7ec      	b.n	8003350 <_malloc_r+0xa0>
 8003376:	4623      	mov	r3, r4
 8003378:	6864      	ldr	r4, [r4, #4]
 800337a:	e7b2      	b.n	80032e2 <_malloc_r+0x32>
 800337c:	4634      	mov	r4, r6
 800337e:	6876      	ldr	r6, [r6, #4]
 8003380:	e7b9      	b.n	80032f6 <_malloc_r+0x46>
 8003382:	230c      	movs	r3, #12
 8003384:	4638      	mov	r0, r7
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	f000 f84c 	bl	8003424 <__malloc_unlock>
 800338c:	e7a1      	b.n	80032d2 <_malloc_r+0x22>
 800338e:	6025      	str	r5, [r4, #0]
 8003390:	e7de      	b.n	8003350 <_malloc_r+0xa0>
 8003392:	bf00      	nop
 8003394:	20000164 	.word	0x20000164

08003398 <_realloc_r>:
 8003398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800339c:	4680      	mov	r8, r0
 800339e:	4614      	mov	r4, r2
 80033a0:	460e      	mov	r6, r1
 80033a2:	b921      	cbnz	r1, 80033ae <_realloc_r+0x16>
 80033a4:	4611      	mov	r1, r2
 80033a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033aa:	f7ff bf81 	b.w	80032b0 <_malloc_r>
 80033ae:	b92a      	cbnz	r2, 80033bc <_realloc_r+0x24>
 80033b0:	f7ff ff16 	bl	80031e0 <_free_r>
 80033b4:	4625      	mov	r5, r4
 80033b6:	4628      	mov	r0, r5
 80033b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033bc:	f000 f838 	bl	8003430 <_malloc_usable_size_r>
 80033c0:	4284      	cmp	r4, r0
 80033c2:	4607      	mov	r7, r0
 80033c4:	d802      	bhi.n	80033cc <_realloc_r+0x34>
 80033c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80033ca:	d812      	bhi.n	80033f2 <_realloc_r+0x5a>
 80033cc:	4621      	mov	r1, r4
 80033ce:	4640      	mov	r0, r8
 80033d0:	f7ff ff6e 	bl	80032b0 <_malloc_r>
 80033d4:	4605      	mov	r5, r0
 80033d6:	2800      	cmp	r0, #0
 80033d8:	d0ed      	beq.n	80033b6 <_realloc_r+0x1e>
 80033da:	42bc      	cmp	r4, r7
 80033dc:	4622      	mov	r2, r4
 80033de:	4631      	mov	r1, r6
 80033e0:	bf28      	it	cs
 80033e2:	463a      	movcs	r2, r7
 80033e4:	f7ff fbac 	bl	8002b40 <memcpy>
 80033e8:	4631      	mov	r1, r6
 80033ea:	4640      	mov	r0, r8
 80033ec:	f7ff fef8 	bl	80031e0 <_free_r>
 80033f0:	e7e1      	b.n	80033b6 <_realloc_r+0x1e>
 80033f2:	4635      	mov	r5, r6
 80033f4:	e7df      	b.n	80033b6 <_realloc_r+0x1e>
	...

080033f8 <_sbrk_r>:
 80033f8:	b538      	push	{r3, r4, r5, lr}
 80033fa:	2300      	movs	r3, #0
 80033fc:	4d05      	ldr	r5, [pc, #20]	; (8003414 <_sbrk_r+0x1c>)
 80033fe:	4604      	mov	r4, r0
 8003400:	4608      	mov	r0, r1
 8003402:	602b      	str	r3, [r5, #0]
 8003404:	f7fd fab8 	bl	8000978 <_sbrk>
 8003408:	1c43      	adds	r3, r0, #1
 800340a:	d102      	bne.n	8003412 <_sbrk_r+0x1a>
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	b103      	cbz	r3, 8003412 <_sbrk_r+0x1a>
 8003410:	6023      	str	r3, [r4, #0]
 8003412:	bd38      	pop	{r3, r4, r5, pc}
 8003414:	2000016c 	.word	0x2000016c

08003418 <__malloc_lock>:
 8003418:	4801      	ldr	r0, [pc, #4]	; (8003420 <__malloc_lock+0x8>)
 800341a:	f000 b811 	b.w	8003440 <__retarget_lock_acquire_recursive>
 800341e:	bf00      	nop
 8003420:	20000170 	.word	0x20000170

08003424 <__malloc_unlock>:
 8003424:	4801      	ldr	r0, [pc, #4]	; (800342c <__malloc_unlock+0x8>)
 8003426:	f000 b80c 	b.w	8003442 <__retarget_lock_release_recursive>
 800342a:	bf00      	nop
 800342c:	20000170 	.word	0x20000170

08003430 <_malloc_usable_size_r>:
 8003430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003434:	1f18      	subs	r0, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	bfbc      	itt	lt
 800343a:	580b      	ldrlt	r3, [r1, r0]
 800343c:	18c0      	addlt	r0, r0, r3
 800343e:	4770      	bx	lr

08003440 <__retarget_lock_acquire_recursive>:
 8003440:	4770      	bx	lr

08003442 <__retarget_lock_release_recursive>:
 8003442:	4770      	bx	lr

08003444 <_init>:
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	bf00      	nop
 8003448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344a:	bc08      	pop	{r3}
 800344c:	469e      	mov	lr, r3
 800344e:	4770      	bx	lr

08003450 <_fini>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	bf00      	nop
 8003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003456:	bc08      	pop	{r3}
 8003458:	469e      	mov	lr, r3
 800345a:	4770      	bx	lr
